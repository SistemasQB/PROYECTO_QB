<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sistema de Asistencia</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <link rel="stylesheet" href="styles.css">
</head>
<style>
    /* Base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}


body {
  background-color: #f5f5f5;
  color: #333;
  line-height: 1.5;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

/* Logo styles */
.logo-container {
  margin-bottom: 2rem;
}

.logo {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 5rem;
  width: 15rem;
  background-color: #f1f5f9;
  border-radius: 0.5rem;
}

.logo h1 {
  font-size: 1.5rem;
  font-weight: bold;
  color: #1e293b;
}

/* Search styles */
.search-container {
  width: 100%;
  max-width: 36rem;
  margin-bottom: 2rem;
}

.search-wrapper {
  position: relative;
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  height: 1.25rem;
  width: 1.25rem;
  color: #9ca3af;
}

.search-input {
  width: 100%;
  padding: 1.5rem 1rem 1.5rem 2.5rem;
  font-size: 1.125rem;
  border: 1px solid #e5e7eb;
  border-radius: 0.375rem;
  outline: none;
  transition: border-color 0.2s;
}

.search-input:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
}

/* Employee list styles */
.employee-list-container {
  width: 100%;
  max-width: 36rem;
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.employee-list-title {
  font-size: 1.25rem;
  font-weight: 600;
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
}

.employee-list {
  list-style: none;
}

.employee-item {
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
  cursor: pointer;
  transition: background-color 0.2s;
}

.employee-item:last-child {
  border-bottom: none;
}

.employee-item:hover {
  background-color: #f8fafc;
}

.no-results {
  padding: 1rem;
  color: #6b7280;
}

/* Dialog styles */
.dialog-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  visibility: hidden;
  opacity: 0;
  transition: visibility 0s linear 0.25s, opacity 0.25s;
}

.dialog-overlay.active {
  visibility: visible;
  opacity: 1;
  transition-delay: 0s;
}

.dialog-content {
  background-color: white;
  border-radius: 0.5rem;
  width: 90%;
  max-width: 32rem;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}

.dialog-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
}

.dialog-title {
  font-size: 1.125rem;
  font-weight: 600;
}

.close-button {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #6b7280;
}

.dialog-body {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.camera-container {
  position: relative;
  width: 100%;
  aspect-ratio: 16/9;
  background-color: black;
  border-radius: 0.5rem;
  overflow: hidden;
}

#cameraVideo, .captured-photo {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.location-info {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  color: #6b7280;
}

.location-icon {
  margin-right: 0.25rem;
}

#locationInfo {
  margin-top: 10px;
  font-size: 0.9em;
  color: #6c757d;
}

.hidden {
  display: none;
}


.dialog-footer {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  padding: 1rem;
  border-top: 1px solid #e5e7eb;
}

@media (min-width: 640px) {
  .dialog-footer {
    flex-direction: row;
    justify-content: space-between;
  }
}

.primary-button, .secondary-button {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
  width: 100%;
}

@media (min-width: 640px) {
  .primary-button, .secondary-button {
    width: auto;
  }
}

.primary-button {
  background-color: #3b82f6;
  color: white;
  border: none;
}

.primary-button:hover {
  background-color: #2563eb;
}

.secondary-button {
  background-color: white;
  color: #374151;
  border: 1px solid #d1d5db;
}

.secondary-button:hover {
  background-color: #f9fafb;
}

.button-icon {
  margin-right: 0.5rem;
}
</style>
<body>
  <main class="container">
    <!-- Company Logo -->
    <div class="logo-container">
      <div class="logo">
        <!-- <h1>LOGO EMPRESA</h1> -->
         <img src="../img/Quality-BOLCA.png" alt="" srcset="" style="width: 100%; height: 150%;">
      </div>
    </div>

    <!-- Search Bar -->
    <div class="search-container">
      <div class="search-wrapper">
        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input type="text" id="buscador" placeholder="Buscar empleado..." class="search-input">
      </div>
    </div>

    <!-- Employee List -->
    <div class="employee-list-container">
      <h2 class="employee-list-title">Empleados</h2>
      <ul id="employeeList" class="employee-list">
        <!-- Employee list items will be added here by JavaScript -->
        <% for (const [key, datos] of Object.entries(vCrup)) { %>
            <li class="employee-item" id="" onclick="abrirModal('<%= datos.nombrelargo %>')"><%= datos.nombrelargo %></li>
        <% }%>
      </ul>
    </div>

    <!-- Selfie Dialog -->
    <div class="modal fade" id="exampleModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h1 class="modal-title fs-5" id="staticBackdropLabel">Modal title</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <!-- Video de la cámara -->
              <div id="cameraContainer">
                <video id="cameraVideo" autoplay></video>
                <canvas id="canvas" class="hidden"></canvas>
              </div>
              <!-- Ubicación -->
              <div id="locationInfo"></div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" id="captureButton" class="btn btn-primary">Tomar Foto</button>
            </div>
          </div>
        </div>
      </div>
  </main>

</body>

<script>
    const buscador = document.querySelector("#buscador")

    buscador.addEventListener("search", e => {
        e.target.value = ""
        document.querySelectorAll(".employee-item").forEach(fruta => {

fruta.textContent.toLowerCase().includes(e.target.value.toLowerCase())
    ? fruta.classList.remove("hidden")
    : fruta.classList.add("hidden")
})
    })

    buscador.addEventListener("keyup", e => {


            if (e.key === "Escape") e.target.value = ""


            document.querySelectorAll(".employee-item").forEach(fruta => {

                fruta.textContent.toLowerCase().includes(e.target.value.toLowerCase())
                    ? fruta.classList.remove("hidden")
                    : fruta.classList.add("hidden")
            })
    })

    // const myModalAlternative = new bootstrap.Modal('#myModal')
    const modal = new bootstrap.Modal('#exampleModal')

    // function abrirModal(nombre) {
    //     document.getElementById('staticBackdropLabel').textContent = nombre
    //     modal.show()
    // }


    // const modal = new bootstrap.Modal('#exampleModal');
const cameraVideo = document.getElementById('cameraVideo');
const canvas = document.getElementById('canvas');
const captureButton = document.getElementById('captureButton');
const locationInfo = document.getElementById('locationInfo');
let stream;

function abrirModal(nombre) {
  document.getElementById('staticBackdropLabel').textContent = nombre;

  // Acceder a la cámara
  navigator.mediaDevices.getUserMedia({ video: true })
    .then((mediaStream) => {
      stream = mediaStream;
      cameraVideo.srcObject = stream;
    })
    .catch((err) => {
      console.error('Error al acceder a la cámara:', err);
      alert('No se pudo acceder a la cámara.');
    });

  // Obtener ubicación
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition((position) => {
      const { latitude, longitude } = position.coords;
      locationInfo.textContent = `Ubicación: Latitud ${latitude}, Longitud ${longitude}`;
    }, (err) => {
      console.error('Error al obtener la ubicación:', err);
      locationInfo.textContent = 'No se pudo obtener la ubicación.';
    });
  } else {
    locationInfo.textContent = 'La geolocalización no es soportada por este navegador.';
  }

  modal.show();
}

// Capturar la foto
captureButton.addEventListener('click', () => {
  canvas.width = cameraVideo.videoWidth;
  canvas.height = cameraVideo.videoHeight;
  const context = canvas.getContext('2d');
  context.drawImage(cameraVideo, 0, 0, canvas.width, canvas.height);

  // Obtener la imagen como data URL
  const imageData = canvas.toDataURL('image/png');
  console.log('Foto capturada:', imageData); // Puedes enviar esta imagen al servidor usando fetch()

  // Mostrar la imagen capturada en lugar de la cámara
  canvas.classList.remove('hidden');
  cameraVideo.classList.add('hidden');

  // Detener el stream de la cámara
  stream.getTracks().forEach(track => track.stop());
});
</script>

</html>