<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Control de Piezas Mal Etiquetadas</title>
    <link rel="stylesheet" href="styles.css">
</head>

<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #374151;
}

.main-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8fafc 0%, #e0f2fe 50%, #e0e7ff 100%);
    padding: 1rem;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

.header {
    text-align: center;
    margin-bottom: 2rem;
}

.title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    font-weight: 700;
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.5rem;
}

.subtitle {
    font-size: 1.25rem;
    color: #dc2626;
    font-weight: 600;
}

.title-divider {
    width: 6rem;
    height: 0.25rem;
    background: linear-gradient(135deg, #ef4444, #dc2626);
    margin: 1rem auto;
    border-radius: 9999px;
}

.card {
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.8);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    border: none;
    border-radius: 1rem;
    overflow: hidden;
}

.setup-card {
    max-width: 600px;
    margin: 0 auto;
}

.card-header {
    text-align: center;
    padding: 2rem 2rem 1.5rem;
}

.icon-container {
    width: 4rem;
    height: 4rem;
    background: linear-gradient(135deg, #3b82f6, #4f46e5);
    border-radius: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
}

.icon {
    width: 2rem;
    height: 2rem;
    color: white;
}

.card-title {
    font-size: 1.5rem;
    font-weight: 700;
    background: linear-gradient(135deg, #1f2937, #4b5563);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.card-content {
    padding: 0 2rem 2rem;
}

.input-group {
    margin-bottom: 1.5rem;
}

.label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.75rem;
}

.label-icon {
    width: 1rem;
    height: 1rem;
}

.input-field {
    width: 100%;
    height: 3rem;
    padding: 0 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.75rem;
    font-size: 1.125rem;
    transition: all 0.2s ease;
    background: white;
}

.input-field:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.code-input {
    border-color: #10b981 !important;
    background: linear-gradient(135deg, #f0fdf4, #ecfdf5) !important;
}

.code-input:focus {
    border-color: #059669 !important;
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1) !important;
}

.mono-font {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.input-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
}

.char-count {
    font-size: 0.875rem;
    color: #6b7280;
}

.progress-bar {
    width: 8rem;
    height: 0.5rem;
    background: #e5e7eb;
    border-radius: 9999px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(135deg, #3b82f6, #4f46e5);
    border-radius: 9999px;
    transition: width 0.3s ease;
    width: 0%;
}

.btn-primary {
    width: 100%;
    height: 3rem;
    background: linear-gradient(135deg, #2563eb, #4f46e5);
    color: white;
    border: none;
    border-radius: 0.75rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 10px 25px -5px rgba(37, 99, 235, 0.4);
}

.btn-outline {
    padding: 0.75rem 2rem;
    border: 2px solid #d1d5db;
    background: white;
    color: #374151;
    border-radius: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-outline:hover {
    border-color: #9ca3af;
    transform: scale(1.05);
}

.validation-panel {
    margin-bottom: 2rem;
}

.validation-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
}

@media (max-width: 1024px) {
    .validation-grid {
        grid-template-columns: 1fr;
    }
}

.control-panel {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.badges {
    display: flex;
    gap: 0.5rem;
}

.badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 600;
}

.badge-outline {
    background: #dbeafe;
    color: #1d4ed8;
    border: 1px solid #bfdbfe;
}

.badge-success {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
}

.reference-section, .progress-section {
    margin-bottom: 1rem;
}

.reference-display {
    padding: 1rem;
    background: linear-gradient(135deg, #f9fafb, #f3f4f6);
    border-radius: 0.75rem;
    font-size: 0.875rem;
    word-break: break-all;
    border-left: 4px solid #3b82f6;
}

.progress-bar-large {
    width: 100%;
    height: 0.75rem;
    background: #e5e7eb;
    border-radius: 9999px;
    overflow: hidden;
    margin-bottom: 0.5rem;
}

.progress-fill-large {
    height: 100%;
    background: linear-gradient(135deg, #10b981, #059669);
    border-radius: 9999px;
    transition: width 0.5s ease;
    width: 0%;
}

.progress-text {
    text-align: center;
    font-size: 0.875rem;
    color: #6b7280;
}

.textarea {
    width: 100%;
    min-height: 12rem;
    padding: 1rem;
    border: 2px solid #e5e7eb;
    border-radius: 0.75rem;
    font-size: 0.875rem;
    resize: vertical;
    transition: all 0.2s ease;
    background: #f9fafb;
    color: #6b7280;
}

.textarea:focus {
    outline: none;
    border-color: #6b7280;
}

.results-panel {
    height: fit-content;
}

.results-container {
    max-height: 37.5rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.result-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-radius: 0.75rem;
    border: 2px solid;
    transition: all 0.2s ease;
}

.result-item.pending {
    background: #f9fafb;
    border-color: #e5e7eb;
}

.result-item.validating {
    background: #fefce8;
    border-color: #fde047;
}

.result-item.valid {
    background: #f0fdf4;
    border-color: #bbf7d0;
}

.result-item.invalid {
    background: #fef2f2;
    border-color: #fecaca;
}

.result-number {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #3b82f6, #4f46e5);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    flex-shrink: 0;
}

.result-content {
    flex: 1;
    min-width: 0;
}

.result-code {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    word-break: break-all;
    margin-bottom: 0.25rem;
}

.result-status {
    font-size: 0.75rem;
    color: #6b7280;
}

.result-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    font-size: 0.875rem;
}

.result-indicator.valid {
    color: #059669;
}

.result-indicator.invalid {
    color: #dc2626;
}

.result-indicator.validating {
    color: #d97706;
}

.result-icon {
    width: 1.25rem;
    height: 1.25rem;
}

.loading-placeholder {
    width: 4rem;
    height: 1.5rem;
    background: #e5e7eb;
    border-radius: 0.25rem;
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

.reset-section {
    text-align: center;
}

.hidden {
    display: none !important;
}

/* Modal Styles */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 1rem;
}

.modal-content {
    background: white;
    border-radius: 1rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    width: 100%;
    max-width: 28rem;
}

.modal-header {
    text-align: center;
    padding: 2rem 2rem 1rem;
}

.alert-icon {
    width: 4rem;
    height: 4rem;
    background: linear-gradient(135deg, #ef4444, #dc2626);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
}

.alert-icon svg {
    width: 2rem;
    height: 2rem;
    color: white;
}

.modal-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #dc2626;
}

.modal-body {
    padding: 0 2rem 2rem;
}

.alert-box {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 0.5rem;
    padding: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.875rem;
}

.code-comparison {
    margin-top: 1rem;
}

.code-section {
    margin-bottom: 0.5rem;
}

.code-display {
    background: white;
    padding: 0.5rem;
    border-radius: 0.25rem;
    margin-top: 0.25rem;
    word-break: break-all;
    border: 1px solid #e5e7eb;
    font-size: 0.75rem;
}

.modal-question {
    text-align: center;
    font-weight: 600;
    color: #374151;
    margin-bottom: 1.5rem;
}

.modal-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
}

.btn-success {
    background: linear-gradient(135deg, #059669, #047857);
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-success:hover {
    background: linear-gradient(135deg, #047857, #065f46);
}

.btn-danger {
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-danger:hover {
    background: linear-gradient(135deg, #b91c1c, #991b1b);
}

/* Scrollbar Styles */
.results-container::-webkit-scrollbar {
    width: 6px;
}

.results-container::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
}

.results-container::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
}

.results-container::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
}

/* Highlight current piece input */
#inputStatus {
    color: #059669;
    font-weight: 600;
}

#currentPieceNumber {
    color: #dc2626;
    font-weight: 700;
}
</style>

<body>
    <main class="main-container">
        <div class="container">
            <div class="header">
                <h1 class="title">Control de Piezas</h1>
                <p class="subtitle">Mal Etiquetadas</p>
                <div class="title-divider"></div>
            </div>

            <!-- Configuración Inicial -->
            <div id="setupCard" class="card setup-card">
                <div class="card-header">
                    <div class="icon-container">
                        <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="16,18 22,12 16,6"></polyline>
                            <polyline points="8,6 2,12 8,18"></polyline>
                        </svg>
                    </div>
                    <h2 class="card-title">Configuración Inicial</h2>
                </div>
                <div class="card-content">
                    <div class="input-group">
                        <label for="referenceCode" class="label">
                            <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="4" y1="9" x2="20" y2="9"></line>
                                <line x1="4" y1="15" x2="20" y2="15"></line>
                                <line x1="10" y1="3" x2="8" y2="21"></line>
                                <line x1="16" y1="3" x2="14" y2="21"></line>
                            </svg>
                            Código de Referencia
                        </label>
                        <input 
                            type="text" 
                            id="referenceCode" 
                            placeholder="Ingrese el código de referencia"
                            class="input-field mono-font"
                        >
                        <div class="input-footer">
                            <span id="charCount" class="char-count">Caracteres: 0</span>
                        </div>
                    </div>

                    <div class="input-group">
                        <label for="pieceCount" class="label">
                            <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                <polyline points="14,2 14,8 20,8"></polyline>
                                <line x1="16" y1="13" x2="8" y2="13"></line>
                                <line x1="16" y1="17" x2="8" y2="17"></line>
                                <polyline points="10,9 9,9 8,9"></polyline>
                            </svg>
                            Cantidad de Piezas a Generar
                        </label>
                        <input 
                            type="number" 
                            id="pieceCount" 
                            min="1" 
                            max="100" 
                            placeholder="Ingrese la cantidad de piezas"
                            class="input-field"
                        >
                    </div>

                    <button id="startBtn" class="btn-primary">
                        Iniciar Validación
                    </button>
                </div>
            </div>

            <!-- Panel de Validación -->
            <div id="validationPanel" class="validation-panel hidden">
                <div class="validation-grid">
                    <!-- Panel de Control -->
                    <div class="control-panel">
                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">Panel de Control</h3>
                                <div class="badges">
                                    <span id="progressBadge" class="badge badge-outline">0/0</span>
                                    <span id="validBadge" class="badge badge-success">✓ 0</span>
                                </div>
                            </div>
                            <div class="card-content">
                                <div class="reference-section">
                                    <label class="label">Código de Referencia Actual</label>
                                    <div id="currentReference" class="reference-display mono-font"></div>
                                </div>

                                <div class="progress-section">
                                    <label class="label">Progreso de Validación</label>
                                    <div class="progress-bar-large">
                                        <div id="validationProgress" class="progress-fill-large"></div>
                                    </div>
                                    <p id="progressText" class="progress-text">0% completado</p>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <h3 class="card-title">Entrada de Códigos</h3>
                            </div>
                            <div class="card-content">
                                <div class="input-group">
                                    <label for="codeInput" class="label">
                                        <svg class="label-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <path d="M12 20h9"></path>
                                            <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                                        </svg>
                                        Ingrese código y presione Enter
                                    </label>
                                    <input 
                                        type="text" 
                                        id="codeInput" 
                                        placeholder="Escriba el código aquí..."
                                        class="input-field mono-font code-input"
                                    >
                                    <p id="inputStatus" class="char-count">Esperando código para pieza #<span id="currentPieceNumber">1</span></p>
                                </div>

                                <div class="input-group">
                                    <label for="codesDisplay" class="label">
                                        Códigos Ingresados
                                    </label>
                                    <textarea 
                                        id="codesDisplay" 
                                        placeholder="Los códigos aparecerán aquí conforme los ingrese..."
                                        class="textarea mono-font"
                                        readonly
                                    ></textarea>
                                    <p id="linesCount" class="char-count">Códigos ingresados: 0/0</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Panel de Resultados -->
                    <div class="card results-panel">
                        <div class="card-header">
                            <h3 class="card-title">Estado de Validación</h3>
                        </div>
                        <div class="card-content">
                            <div id="resultsContainer" class="results-container">
                                <!-- Los resultados se generarán dinámicamente -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="reset-section">
                <button id="resetBtn" class="btn-outline hidden">
                    Reiniciar Proceso
                </button>
            </div>
        </div>
    </main>

    <!-- Modal de Alerta -->
    <div id="alertModal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <div class="alert-icon">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
                        <line x1="12" y1="9" x2="12" y2="13"></line>
                        <line x1="12" y1="17" x2="12.01" y2="17"></line>
                    </svg>
                </div>
                <h3 class="modal-title">Código Incorrecto</h3>
            </div>
            <div class="modal-body">
                <div class="alert-box">
                    <p>El código ingresado no coincide con el código de referencia.</p>
                    <div class="code-comparison">
                        <div class="code-section">
                            <strong>Código de referencia:</strong>
                            <div id="modalReferenceCode" class="code-display mono-font"></div>
                        </div>
                        <div class="code-section">
                            <strong>Código ingresado:</strong>
                            <div id="modalInvalidCode" class="code-display mono-font"></div>
                        </div>
                    </div>
                </div>
                <p class="modal-question">¿Desea cambiar el código de referencia?</p>
                <div class="modal-buttons">
                    <button id="changeReferenceBtn" class="btn-success">
                        Sí, cambiar
                    </button>
                    <button id="keepReferenceBtn" class="btn-danger">
                        No, mantener
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>

<script>
    class CodeValidator {
    constructor() {
        this.referenceCode = '';
        this.pieceCount = 0;
        this.pieceCodes = [];
        this.currentPieceIndex = 0;
        this.currentValidatingIndex = null;
        this.invalidCode = '';
        
        this.initializeElements();
        this.bindEvents();
    }

    initializeElements() {
        // Setup elements
        this.setupCard = document.getElementById('setupCard');
        this.validationPanel = document.getElementById('validationPanel');
        this.resetBtn = document.getElementById('resetBtn');
        
        // Input elements
        this.referenceCodeInput = document.getElementById('referenceCode');
        this.pieceCountInput = document.getElementById('pieceCount');
        this.codeInput = document.getElementById('codeInput');
        this.codesDisplay = document.getElementById('codesDisplay');
        this.startBtn = document.getElementById('startBtn');
        
        // Display elements
        this.charCount = document.getElementById('charCount');
        this.currentReference = document.getElementById('currentReference');
        this.progressBadge = document.getElementById('progressBadge');
        this.validBadge = document.getElementById('validBadge');
        this.validationProgress = document.getElementById('validationProgress');
        this.progressText = document.getElementById('progressText');
        this.linesCount = document.getElementById('linesCount');
        this.inputStatus = document.getElementById('inputStatus');
        this.currentPieceNumber = document.getElementById('currentPieceNumber');
        this.resultsContainer = document.getElementById('resultsContainer');
        
        // Modal elements
        this.alertModal = document.getElementById('alertModal');
        this.modalReferenceCode = document.getElementById('modalReferenceCode');
        this.modalInvalidCode = document.getElementById('modalInvalidCode');
        this.changeReferenceBtn = document.getElementById('changeReferenceBtn');
        this.keepReferenceBtn = document.getElementById('keepReferenceBtn');
    }

    bindEvents() {
        // Setup events
        this.referenceCodeInput.addEventListener('input', (e) => this.updateCharCount(e.target.value));
        this.startBtn.addEventListener('click', () => this.handleSetup());
        this.resetBtn.addEventListener('click', () => this.resetForm());
        
        // Code input events
        this.codeInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleCodeSubmit();
            }
        });
        
        // Modal events
        this.changeReferenceBtn.addEventListener('click', () => this.handleChangeReference());
        this.keepReferenceBtn.addEventListener('click', () => this.handleKeepReference());
        
        // Close modal when clicking outside
        this.alertModal.addEventListener('click', (e) => {
            if (e.target === this.alertModal) {
                this.hideAlert();
            }
        });
    }

    updateCharCount(value) {
        const length = value.length;
        this.charCount.textContent = `Caracteres: ${length}`;
    }

    handleSetup() {
        const referenceCode = this.referenceCodeInput.value.trim();
        const pieceCount = parseInt(this.pieceCountInput.value);

        if (!referenceCode) {
            alert('Debe ingresar un código de referencia');
            return;
        }

        if (!pieceCount || pieceCount <= 0) {
            alert('La cantidad de piezas debe ser mayor a 0');
            return;
        }

        this.referenceCode = referenceCode;
        this.pieceCount = pieceCount;
        this.currentPieceIndex = 0;
        this.initializePieces();
        this.showValidationPanel();
    }

    initializePieces() {
        this.pieceCodes = Array.from({ length: this.pieceCount }, (_, index) => ({
            id: index + 1,
            code: '',
            isValid: false,
            isFinished: false
        }));

        this.updateDisplay();
        this.renderResults();
        this.updateInputStatus();
        this.updateCodesDisplay();
    }

    showValidationPanel() {
        this.setupCard.classList.add('hidden');
        this.validationPanel.classList.remove('hidden');
        this.resetBtn.classList.remove('hidden');
        
        this.currentReference.textContent = this.referenceCode;
        this.codeInput.focus();
    }

    handleCodeSubmit() {
        const code = this.codeInput.value.trim();
        
        if (!code) {
            alert('Debe ingresar un código');
            return;
        }

        if (this.currentPieceIndex >= this.pieceCount) {
            alert('Ya se han ingresado todos los códigos');
            return;
        }

        // Asignar el código a la pieza actual
        this.pieceCodes[this.currentPieceIndex].code = code;
        
        // Validar el código
        this.validateCode(this.currentPieceIndex, code);
        
        // Limpiar el input
        this.codeInput.value = '';
        
        // Actualizar displays
        this.updateCodesDisplay();
        this.updateDisplay();
        this.renderResults();
    }

    validateCode(index, code) {
        if (code === this.referenceCode) {
            this.pieceCodes[index].isValid = true;
            this.pieceCodes[index].isFinished = true;
            this.moveToNextPiece();
        } else {
            this.currentValidatingIndex = index;
            this.invalidCode = code;
            this.showAlert();
        }
    }

    moveToNextPiece() {
        this.currentPieceIndex++;
        this.updateInputStatus();
        
        if (this.currentPieceIndex < this.pieceCount) {
            this.codeInput.focus();
        } else {
            this.codeInput.disabled = true;
            this.inputStatus.textContent = 'Todos los códigos han sido ingresados';
        }
    }

    updateInputStatus() {
        if (this.currentPieceIndex < this.pieceCount) {
            this.currentPieceNumber.textContent = this.currentPieceIndex + 1;
            this.inputStatus.innerHTML = `Esperando código para pieza #<span id="currentPieceNumber">${this.currentPieceIndex + 1}</span>`;
        }
    }

    updateCodesDisplay() {
        const codes = this.pieceCodes
            .filter(piece => piece.code)
            .map(piece => piece.code)
            .join('\n');
        
        this.codesDisplay.value = codes;
        this.codesDisplay.rows = Math.max(8, this.pieceCount);
        
        const enteredCodes = this.pieceCodes.filter(piece => piece.code).length;
        this.linesCount.textContent = `Códigos ingresados: ${enteredCodes}/${this.pieceCount}`;
    }

    showAlert() {
        this.modalReferenceCode.textContent = this.referenceCode;
        this.modalInvalidCode.textContent = this.invalidCode;
        this.alertModal.classList.remove('hidden');
    }

    hideAlert() {
        this.alertModal.classList.add('hidden');
        this.currentValidatingIndex = null;
        this.invalidCode = '';
    }

    handleChangeReference() {
        // Cambiar el código de referencia al código ingresado
        this.referenceCode = this.invalidCode;
        this.currentReference.textContent = this.referenceCode;
        
        // Marcar la pieza actual como válida
        if (this.currentValidatingIndex !== null) {
            this.pieceCodes[this.currentValidatingIndex].isValid = true;
            this.pieceCodes[this.currentValidatingIndex].isFinished = true;
        }
        
        this.hideAlert();
        this.moveToNextPiece();
        this.updateDisplay();
        this.renderResults();
    }

    handleKeepReference() {
        // Mantener el código de referencia y marcar la pieza como inválida
        if (this.currentValidatingIndex !== null) {
            this.pieceCodes[this.currentValidatingIndex].isValid = false;
            this.pieceCodes[this.currentValidatingIndex].isFinished = true;
        }
        
        this.hideAlert();
        this.moveToNextPiece();
        this.updateDisplay();
        this.renderResults();
    }

    updateDisplay() {
        const completedPieces = this.pieceCodes.filter(piece => piece.isFinished).length;
        const validPieces = this.pieceCodes.filter(piece => piece.isValid && piece.isFinished).length;
        const progressPercentage = this.pieceCount > 0 ? (completedPieces / this.pieceCount) * 100 : 0;

        this.progressBadge.textContent = `${completedPieces}/${this.pieceCount}`;
        this.validBadge.textContent = `✓ ${validPieces}`;
        this.validationProgress.style.width = `${progressPercentage}%`;
        this.progressText.textContent = `${progressPercentage.toFixed(1)}% completado`;
    }

    renderResults() {
        this.resultsContainer.innerHTML = '';

        this.pieceCodes.forEach((piece, index) => {
            const resultItem = document.createElement('div');
            resultItem.className = 'result-item';

            let statusClass = 'pending';
            let statusText = 'Esperando código';
            let statusIcon = '';

            if (piece.isFinished) {
                if (piece.isValid) {
                    statusClass = 'valid';
                    statusText = 'Válido';
                    statusIcon = `
                        <svg class="result-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22,4 12,14.01 9,11.01"></polyline>
                        </svg>
                    `;
                } else {
                    statusClass = 'invalid';
                    statusText = 'Inválido';
                    statusIcon = `
                        <svg class="result-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                    `;
                }
            } else if (piece.code) {
                statusClass = 'validating';
                statusText = 'Validando...';
                statusIcon = `
                    <svg class="result-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
                        <line x1="12" y1="9" x2="12" y2="13"></line>
                        <line x1="12" y1="17" x2="12.01" y2="17"></line>
                    </svg>
                `;
            } else if (index === this.currentPieceIndex) {
                statusClass = 'validating';
                statusText = 'Esperando entrada...';
                statusIcon = `
                    <svg class="result-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 20h9"></path>
                        <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                    </svg>
                `;
            }

            resultItem.classList.add(statusClass);

            resultItem.innerHTML = `
                <div class="result-number">${piece.id}</div>
                <div class="result-content">
                    <div class="result-code">${piece.code || (index === this.currentPieceIndex ? 'Ingresando...' : 'Pendiente...')}</div>
                    <div class="result-status">
                        ${piece.code ? `${piece.code.length} caracteres` : (index === this.currentPieceIndex ? 'Pieza actual' : 'Esperando código')}
                    </div>
                </div>
                <div class="result-indicator ${statusClass}">
                    ${piece.isFinished || piece.code || index === this.currentPieceIndex ? 
                        `${statusIcon}<span>${statusText}</span>` : 
                        '<div class="loading-placeholder"></div>'
                    }
                </div>
            `;

            this.resultsContainer.appendChild(resultItem);
        });
    }

    resetForm() {
        this.referenceCode = '';
        this.pieceCount = 0;
        this.pieceCodes = [];
        this.currentPieceIndex = 0;
        this.currentValidatingIndex = null;
        this.invalidCode = '';

        this.referenceCodeInput.value = '';
        this.pieceCountInput.value = '';
        this.codeInput.value = '';
        this.codeInput.disabled = false;
        this.codesDisplay.value = '';
        this.updateCharCount('');

        this.setupCard.classList.remove('hidden');
        this.validationPanel.classList.add('hidden');
        this.resetBtn.classList.add('hidden');
        this.hideAlert();
    }
}

// Initialize the application when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new CodeValidator();
});
</script>

</html>