
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Candidatos</title>
    <link href="style.css" rel="stylesheet" type="text/css" />
</head>

<style>

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Arial', sans-serif;
    background-color: #f5f5f5;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h1 {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 30px;
    font-size: 2.5rem;
}

.candidates-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.candidate-card {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border-left: 5px solid;
}

.candidate-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
}

/* Colores según estatus */
.status-0 { border-left-color: #e74c3c; } /* Rechazado - Rojo */
.status-1 { border-left-color: #f39c12; } /* No revisado - Naranja */
.status-2 { border-left-color: #3498db; } /* Revisado - Azul */
.status-3 { border-left-color: #f1c40f; } /* Aceptado sin expediente - Amarillo */
.status-4 { border-left-color: #27ae60; } /* Aceptado con expediente - Verde */

.candidate-header h3 {
    color: #2c3e50;
    margin-bottom: 10px;
    font-size: 1.2rem;
}

.candidate-info p {
    margin: 5px 0;
    color: #7f8c8d;
    font-size: 0.9rem;
}

.status-badge {
    display: inline-block;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
    margin-top: 10px;
    color: white;
}

.status-badge.status-0 { background-color: #e74c3c; }
.status-badge.status-1 { background-color: #f39c12; }
.status-badge.status-2 { background-color: #3498db; }
.status-badge.status-3 { background-color: #f1c40f; color: #333; }
.status-badge.status-4 { background-color: #27ae60; }

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 30px;
    border-radius: 10px;
    width: 90%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    right: 20px;
    top: 20px;
}

.close:hover {
    color: #000;
}

.detail-section {
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 8px;
}

.detail-section h3 {
    color: #2c3e50;
    margin-bottom: 10px;
    border-bottom: 2px solid #3498db;
    padding-bottom: 5px;
}

.detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.detail-item {
    background: white;
    padding: 10px;
    border-radius: 5px;
    border-left: 3px solid #3498db;
}

.detail-item strong {
    color: #2c3e50;
    display: block;
    margin-bottom: 5px;
}

.pdf-viewer {
    width: 100%;
    height: 500px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-top: 10px;
}

.button-group {
    display: flex;
    gap: 10px;
    margin-top: 20px;
    flex-wrap: wrap;
}

.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    font-weight: bold;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    text-align: center;
}

.btn-accept {
    background-color: #27ae60;
    color: white;
}

.btn-accept:hover {
    background-color: #219a52;
}

.btn-reject {
    background-color: #e74c3c;
    color: white;
}

.btn-reject:hover {
    background-color: #c0392b;
}

.btn-form {
    background-color: #3498db;
    color: white;
}

.btn-form:hover {
    background-color: #2980b9;
}

.btn-upload {
    background-color: #f39c12;
    color: white;
}

.btn-upload:hover {
    background-color: #d68910;
}

.btn-contract {
    background-color: #9b59b6;
    color: white;
}

.btn-contract:hover {
    background-color: #8e44ad;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #2c3e50;
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
}

.form-group textarea {
    resize: vertical;
}

.no-candidates {
    text-align: center;
    color: #7f8c8d;
    font-size: 1.2rem;
    margin-top: 50px;
}

@media (max-width: 768px) {
    .candidates-list {
        grid-template-columns: 1fr;
    }
    
    .modal-content {
        width: 95%;
        margin: 2% auto;
        padding: 20px;
    }
    
    .detail-grid {
        grid-template-columns: 1fr;
    }
    
    .button-group {
        flex-direction: column;
    }
}

</style>

<body>
    <div class="container">
        <h1>Sistema de Gestión de Candidatos</h1>
        
        <!-- Lista de candidatos -->
        <div id="candidatesList" class="candidates-list">
            <!-- Los candidatos se cargarán aquí dinámicamente -->
        </div>

        <!-- Modal para detalles del candidato -->
        <div id="candidateModal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <div id="candidateDetails"></div>
            </div>
        </div>

        <!-- Modal para formulario adicional -->
        <div id="additionalFormModal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>Información Adicional del Candidato</h2>
                <form id="additionalForm">
                    <div class="form-group">
                        <label for="birthDate">Fecha de Nacimiento:</label>
                        <input type="date" id="birthDate" required>
                    </div>
                    <div class="form-group">
                        <label for="education">Educación:</label>
                        <textarea id="education" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="skills">Habilidades:</label>
                        <textarea id="skills" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="previousJobs">Trabajos Anteriores:</label>
                        <textarea id="previousJobs" rows="4" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="references">Referencias:</label>
                        <textarea id="references" rows="3" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="emergencyContact">Contacto de Emergencia:</label>
                        <input type="text" id="emergencyContact" required>
                    </div>
                    <button type="submit">Guardar Información</button>
                </form>
            </div>
        </div>

        <!-- Modal para subir expediente -->
        <div id="expedienteModal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2>Subir Expediente</h2>
                <form id="expedienteForm">
                    <div class="form-group">
                        <label for="expedienteFile">Seleccionar archivo PDF:</label>
                        <input type="file" id="expedienteFile" accept=".pdf" required>
                    </div>
                    <button type="submit">Subir Expediente</button>
                </form>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>

<script>

// Datos de ejemplo de candidatos
const candidatesData = [
    {
        id: 1,
        puesto: "Desarrollador Frontend",
        sueldo: 25000,
        nombre: "Juan",
        apellidoP: "Pérez",
        apellidoM: "García",
        correo: "juan.perez@email.com",
        telefono: "555-0101",
        direccion: "Calle Principal 123",
        region: "CDMX",
        cp: "01234",
        experiencia: "3 años en React y JavaScript",
        cv: "juan_perez_cv.pdf",
        comentario: "Candidato con buena experiencia en frontend",
        estatus: 1,
        revisado: false,
        createdAt: "2024-01-15T10:30:00Z"
    },
    {
        id: 2,
        puesto: "Analista de Datos",
        sueldo: 30000,
        nombre: "María",
        apellidoP: "López",
        apellidoM: "Hernández",
        correo: "maria.lopez@email.com",
        telefono: "555-0102",
        direccion: "Av. Reforma 456",
        region: "Guadalajara",
        cp: "44100",
        experiencia: "5 años en Python y SQL",
        cv: "maria_lopez_cv.pdf",
        comentario: "Excelente perfil para análisis de datos",
        estatus: 3,
        revisado: true,
        createdAt: "2024-01-14T14:20:00Z"
    },
    {
        id: 3,
        puesto: "Diseñador UX/UI",
        sueldo: 28000,
        nombre: "Carlos",
        apellidoP: "Rodríguez",
        apellidoM: "Martínez",
        correo: "carlos.rodriguez@email.com",
        telefono: "555-0103",
        direccion: "Colonia Centro 789",
        region: "Monterrey",
        cp: "64000",
        experiencia: "4 años en Figma y Adobe Creative",
        cv: "carlos_rodriguez_cv.pdf",
        comentario: "Portfolio muy impresionante",
        estatus: 4,
        revisado: true,
        createdAt: "2024-01-13T09:15:00Z"
    },
    {
        id: 4,
        puesto: "Backend Developer",
        sueldo: 35000,
        nombre: "Ana",
        apellidoP: "González",
        apellidoM: "Ruiz",
        correo: "ana.gonzalez@email.com",
        telefono: "555-0104",
        direccion: "Zona Rosa 321",
        region: "CDMX",
        cp: "06700",
        experiencia: "6 años en Node.js y MongoDB",
        cv: "ana_gonzalez_cv.pdf",
        comentario: "Candidata senior con mucha experiencia",
        estatus: 0,
        revisado: true,
        createdAt: "2024-01-12T16:45:00Z"
    }
];

// Estado de la aplicación
let currentCandidateId = null;

// Mapeo de estatus
const statusMap = {
    0: "Rechazado",
    1: "No revisado",
    2: "Revisado",
    3: "Aceptado sin expediente",
    4: "Aceptado con expediente"
};

// Inicializar la aplicación
document.addEventListener('DOMContentLoaded', function() {
    renderCandidates();
    setupModalEvents();
});

// Renderizar lista de candidatos
function renderCandidates() {
    const candidatesList = document.getElementById('candidatesList');
    
    if (candidatesData.length === 0) {
        candidatesList.innerHTML = '<div class="no-candidates">No hay candidatos disponibles</div>';
        return;
    }

    candidatesList.innerHTML = candidatesData.map(candidate => {
        const createdDate = new Date(candidate.createdAt).toLocaleDateString('es-ES');
        
        return `
            <div class="candidate-card status-${candidate.estatus}" onclick="showCandidateDetails(${candidate.id})">
                <div class="candidate-header">
                    <h3>${candidate.nombre} ${candidate.apellidoP} ${candidate.apellidoM}</h3>
                </div>
                <div class="candidate-info">
                    <p><strong>Puesto:</strong> ${candidate.puesto}</p>
                    <p><strong>Sueldo:</strong> $${candidate.sueldo.toLocaleString()}</p>
                    <p><strong>Región:</strong> ${candidate.region}</p>
                    <p><strong>Fecha de solicitud:</strong> ${createdDate}</p>
                    <span class="status-badge status-${candidate.estatus}">
                        ${statusMap[candidate.estatus]}
                    </span>
                </div>
            </div>
        `;
    }).join('');
}

// Mostrar detalles del candidato
function showCandidateDetails(candidateId) {
    const candidate = candidatesData.find(c => c.id === candidateId);
    if (!candidate) return;

    currentCandidateId = candidateId;
    const modal = document.getElementById('candidateModal');
    const detailsContainer = document.getElementById('candidateDetails');

    const createdDate = new Date(candidate.createdAt).toLocaleString('es-ES');

    detailsContainer.innerHTML = `
        <h2>Detalles del Candidato</h2>
        
        <div class="detail-section">
            <h3>Información Personal</h3>
            <div class="detail-grid">
                <div class="detail-item">
                    <strong>Nombre Completo:</strong>
                    ${candidate.nombre} ${candidate.apellidoP} ${candidate.apellidoM}
                </div>
                <div class="detail-item">
                    <strong>Correo Electrónico:</strong>
                    ${candidate.correo}
                </div>
                <div class="detail-item">
                    <strong>Teléfono:</strong>
                    ${candidate.telefono}
                </div>
                <div class="detail-item">
                    <strong>Dirección:</strong>
                    ${candidate.direccion}
                </div>
                <div class="detail-item">
                    <strong>Región:</strong>
                    ${candidate.region}
                </div>
                <div class="detail-item">
                    <strong>Código Postal:</strong>
                    ${candidate.cp}
                </div>
            </div>
        </div>

        <div class="detail-section">
            <h3>Información Laboral</h3>
            <div class="detail-grid">
                <div class="detail-item">
                    <strong>Puesto Solicitado:</strong>
                    ${candidate.puesto}
                </div>
                <div class="detail-item">
                    <strong>Sueldo Esperado:</strong>
                    $${candidate.sueldo.toLocaleString()}
                </div>
                <div class="detail-item">
                    <strong>Experiencia:</strong>
                    ${candidate.experiencia}
                </div>
                <div class="detail-item">
                    <strong>Estatus:</strong>
                    <span class="status-badge status-${candidate.estatus}">
                        ${statusMap[candidate.estatus]}
                    </span>
                </div>
            </div>
        </div>

        <div class="detail-section">
            <h3>Currículum Vitae</h3>
            <p><strong>Archivo:</strong> ${candidate.cv}</p>
            <iframe class="pdf-viewer" src="data:application/pdf;base64,JVBERi0xLjQKJcOkw7zDtsKgw7PCkMOGw5XDs8OqwoQKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovT3V0bGluZXMgMiAwIFIKL1BhZ2VzIDMgMCBSCj4+CmVuZG9iagoyIDAgb2JqCjw8Ci9UeXBlIC9PdXRsaW5lcwovQ291bnQgMAo+PgplbmRvYmoKMyAwIG9iago8PAovVHlwZSAvUGFnZXMKL0NvdW50IDEKL0tpZHMgWzQgMCBSXQo+PgplbmRvYmoKNCAwIG9iago8PAovVHlwZSAvUGFnZQovUGFyZW50IDMgMCBSCi9SZXNvdXJjZXMgPDwKL0ZvbnQgPDwKL0YxIDUgMCBSCj4+Cj4+Ci9NZWRpYUJveCBbMC4wMDAgMC4wMDAgNjEyLjAwMCA3OTIuMDAwXQovQ29udGVudHMgNiAwIFIKPj4KZW5kb2JqCjUgMCBvYmoKPDwKL1R5cGUgL0ZvbnQKL1N1YnR5cGUgL1R5cGUxCi9CYXNlRm9udCAvSGVsdmV0aWNhCj4+CmVuZG9iago2IDAgb2JqCjw8Ci9MZW5ndGggNDQKPj4Kc3RyZWFtCkJUCi9GMSA2MCBUZA=="></iframe>
        </div>

        <div class="detail-section">
            <h3>Comentarios</h3>
            <p>${candidate.comentario}</p>
        </div>

        <div class="detail-section">
            <h3>Información de Solicitud</h3>
            <div class="detail-grid">
                <div class="detail-item">
                    <strong>Fecha de Solicitud:</strong>
                    ${createdDate}
                </div>
                <div class="detail-item">
                    <strong>Revisado:</strong>
                    ${candidate.revisado ? 'Sí' : 'No'}
                </div>
            </div>
        </div>

        ${generateActionButtons(candidate)}
    `;

    modal.style.display = 'block';
}

// Generar botones según el estatus
function generateActionButtons(candidate) {
    let buttons = '';

    if (candidate.estatus === 1) {
        // No revisado - mostrar botones de aceptar y rechazar
        buttons = `
            <div class="button-group">
                <button class="btn btn-accept" onclick="acceptCandidate(${candidate.id})">
                    Aceptar Candidato
                </button>
                <button class="btn btn-reject" onclick="rejectCandidate(${candidate.id})">
                    Rechazar Candidato
                </button>
            </div>
        `;
    } else if (candidate.estatus === 3) {
        // Aceptado sin expediente - mostrar botones de formulario y subir expediente
        buttons = `
            <div class="button-group">
                <button class="btn btn-form" onclick="showAdditionalForm(${candidate.id})">
                    Llenar Formulario Adicional
                </button>
                <button class="btn btn-upload" onclick="showExpedienteUpload(${candidate.id})">
                    Subir Expediente
                </button>
            </div>
        `;
    } else if (candidate.estatus === 4) {
        // Aceptado con expediente - mostrar botón de generar contrato
        buttons = `
            <div class="button-group">
                <button class="btn btn-contract" onclick="generateContract(${candidate.id})">
                    Generar Contrato
                </button>
            </div>
        `;
    }

    return buttons;
}

// Configurar eventos de modales
function setupModalEvents() {
    const modals = document.querySelectorAll('.modal');
    const closeButtons = document.querySelectorAll('.close');

    closeButtons.forEach(closeButton => {
        closeButton.onclick = function() {
            this.closest('.modal').style.display = 'none';
        };
    });

    window.onclick = function(event) {
        modals.forEach(modal => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    };

    // Configurar formulario adicional
    document.getElementById('additionalForm').onsubmit = function(e) {
        e.preventDefault();
        saveAdditionalForm();
    };

    // Configurar formulario de expediente
    document.getElementById('expedienteForm').onsubmit = function(e) {
        e.preventDefault();
        uploadExpediente();
    };
}

// Aceptar candidato
function acceptCandidate(candidateId) {
    const candidateIndex = candidatesData.findIndex(c => c.id === candidateId);
    if (candidateIndex !== -1) {
        candidatesData[candidateIndex].estatus = 3; // Aceptado sin expediente
        candidatesData[candidateIndex].revisado = true;
        
        alert('Candidato aceptado exitosamente');
        renderCandidates();
        document.getElementById('candidateModal').style.display = 'none';
    }
}

// Rechazar candidato
function rejectCandidate(candidateId) {
    const candidateIndex = candidatesData.findIndex(c => c.id === candidateId);
    if (candidateIndex !== -1) {
        candidatesData[candidateIndex].estatus = 0; // Rechazado
        candidatesData[candidateIndex].revisado = true;
        
        alert('Candidato rechazado');
        renderCandidates();
        document.getElementById('candidateModal').style.display = 'none';
    }
}

// Mostrar formulario adicional
function showAdditionalForm(candidateId) {
    currentCandidateId = candidateId;
    document.getElementById('additionalFormModal').style.display = 'block';
}

// Guardar formulario adicional
function saveAdditionalForm() {
    const formData = {
        birthDate: document.getElementById('birthDate').value,
        education: document.getElementById('education').value,
        skills: document.getElementById('skills').value,
        previousJobs: document.getElementById('previousJobs').value,
        references: document.getElementById('references').value,
        emergencyContact: document.getElementById('emergencyContact').value
    };

    // Aquí normalmente enviarías los datos al servidor
    console.log('Datos adicionales guardados:', formData);
    
    alert('Información adicional guardada exitosamente');
    document.getElementById('additionalFormModal').style.display = 'none';
    document.getElementById('additionalForm').reset();
}

// Mostrar formulario de expediente
function showExpedienteUpload(candidateId) {
    currentCandidateId = candidateId;
    document.getElementById('expedienteModal').style.display = 'block';
}

// Subir expediente
function uploadExpediente() {
    const fileInput = document.getElementById('expedienteFile');
    const file = fileInput.files[0];

    if (file && file.type === 'application/pdf') {
        // Cambiar estatus a "Aceptado con expediente"
        const candidateIndex = candidatesData.findIndex(c => c.id === currentCandidateId);
        if (candidateIndex !== -1) {
            candidatesData[candidateIndex].estatus = 4;
        }

        alert('Expediente subido exitosamente');
        renderCandidates();
        document.getElementById('expedienteModal').style.display = 'none';
        document.getElementById('expedienteForm').reset();
    } else {
        alert('Por favor, selecciona un archivo PDF válido');
    }
}

// Generar contrato
function generateContract(candidateId) {
    const candidate = candidatesData.find(c => c.id === candidateId);
    if (!candidate) return;

    const contractDate = new Date().toLocaleDateString('es-ES');
    const startDate = new Date();
    startDate.setDate(startDate.getDate() + 30);
    const formattedStartDate = startDate.toLocaleDateString('es-ES');

    const contractContent = `
        CONTRATO DE TRABAJO
        
        Fecha: ${contractDate}
        
        EMPLEADO:
        Nombre: ${candidate.nombre} ${candidate.apellidoP} ${candidate.apellidoM}
        Dirección: ${candidate.direccion}, ${candidate.region}, CP: ${candidate.cp}
        Teléfono: ${candidate.telefono}
        Correo: ${candidate.correo}
        
        PUESTO: ${candidate.puesto}
        SUELDO: $${candidate.sueldo.toLocaleString()} mensuales
        FECHA DE INICIO: ${formattedStartDate}
        
        Por medio del presente contrato, la empresa contrata los servicios del empleado
        mencionado anteriormente bajo las condiciones establecidas en este documento.
        
        Firmas:
        
        _____________________          _____________________
        Empleado                       Empleador
    `;

    // Crear y descargar el PDF (simulado)
    const blob = new Blob([contractContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `contrato_${candidate.nombre}_${candidate.apellidoP}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    alert('Contrato generado y descargado exitosamente');
}

</script>

</html>
