<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro de Mantenimiento Autónomo - Quality BOLCA</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>

<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  background-color: #f5f5f5;
  color: #333;
  line-height: 1.6;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
}

/* Header */
.header {
  text-align: center;
  margin-bottom: 30px;
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.logo-container {
  margin-bottom: 15px;
}

.hidden {
  display: none;
}

.logo {
  height: 80px;
  width: auto;
}

.main-title {
  font-size: 2.5rem;
  color: #2563eb;
  font-weight: 700;
  margin: 0;
}

/* Barra de búsqueda */
.search-container {
  margin-bottom: 30px;
}

.search-box {
  position: relative;
  max-width: 600px;
  margin: 0 auto;
}

.search-input {
  width: 100%;
  padding: 15px 50px 15px 50px;
  border: 2px solid #e5e7eb;
  border-radius: 12px;
  font-size: 16px;
  background: white;
  transition: all 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: #2563eb;
  box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.search-icon {
  position: absolute;
  left: 18px;
  top: 50%;
  transform: translateY(-50%);
  color: #6b7280;
  font-size: 18px;
}

.clear-btn {
  position: absolute;
  right: 15px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  padding: 5px;
  border-radius: 50%;
  transition: all 0.2s ease;
}

.clear-btn:hover {
  background: #f3f4f6;
  color: #374151;
}

/* Grid de cartas */
.cards-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 24px;
  margin-bottom: 40px;
}

/* Cartas */
.card {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  border: 2px solid;
  transition: all 0.3s ease;
  cursor: pointer;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.card.green {
  border-color: #10b981;
  background: #f0fdf4;
}

.card.yellow {
  border-color: #f59e0b;
  background: #fffbeb;
}

.card.red {
  border-color: #ef4444;
  background: #fef2f2;
}

.card-title {
  font-size: 1.2rem;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 16px;
  line-height: 1.4;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.card-info {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 12px;
  color: #6b7280;
  font-size: 14px;
}

.card-info i {
  width: 16px;
  font-size: 14px;
}

.card-rating {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
}

.rating-label {
  display: flex;
  align-items: center;
  gap: 8px;
  font-weight: 500;
  font-size: 14px;
}

.rating-badge {
  padding: 6px 12px;
  border-radius: 20px;
  color: white;
  font-weight: 700;
  font-size: 14px;
}

.rating-badge.green {
  background: #10b981;
}
.rating-badge.yellow {
  background: #f59e0b;
}
.rating-badge.red {
  background: #ef4444;
}

.show-info-btn {
  width: 100%;
  padding: 12px;
  background: white;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s ease;
}

.show-info-btn:hover {
  background: #f9fafb;
  border-color: #2563eb;
  color: #2563eb;
}

/* No results */
.no-results {
  text-align: center;
  padding: 60px 20px;
  color: #6b7280;
}

.no-results i {
  font-size: 4rem;
  margin-bottom: 20px;
  opacity: 0.5;
}

.no-results h3 {
  font-size: 1.5rem;
  margin-bottom: 10px;
  color: #374151;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.modal-content {
  background: white;
  margin: 2% auto;
  border-radius: 12px;
  width: 90%;
  max-width: 800px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 20px 25px rgba(0, 0, 0, 0.25);
}

.modal-header {
  padding: 24px;
  border-bottom: 2px solid #e5e7eb;
  position: relative;
}

.modal-header-content {
  display: flex;
  align-items: center;
  gap: 20px;
}

.modal-logo-container {
  flex-shrink: 0;
}

.modal-logo {
  height: 60px;
  width: auto;
}

.modal-title-section {
  flex: 1;
}

.modal-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #2563eb;
  margin-bottom: 8px;
}

.modal-info {
  font-size: 12px;
  color: #6b7280;
  line-height: 1.4;
}

.close-btn {
  position: absolute;
  top: 20px;
  right: 20px;
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  padding: 8px;
  border-radius: 50%;
  transition: all 0.2s ease;
}

.close-btn:hover {
  background: #f3f4f6;
  color: #374151;
}

.modal-body {
  padding: 24px;
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  font-weight: 500;
  margin-bottom: 8px;
  color: #374151;
}

.form-input,
.form-select {
  width: 100%;
  padding: 12px;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  background: #f9fafb;
  font-size: 14px;
}

.name-display {
  font-size: 1.1rem;
  font-weight: 600;
  color: #1f2937;
  padding: 16px;
  background: #f9fafb;
  border-radius: 8px;
  border: 2px solid #e5e7eb;
}

.checklist-section {
  margin-top: 30px;
}

.checklist-header {
  background: #374151;
  color: white;
  padding: 12px 20px;
  border-radius: 8px 8px 0 0;
}

.checklist-header h3 {
  margin: 0;
  font-size: 1.1rem;
}

.checklist-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  padding: 20px;
  border: 2px solid #e5e7eb;
  border-top: none;
  border-radius: 0 0 8px 8px;
  background: white;
}

.checkbox-item {
  display: flex;
  align-items: flex-start;
  gap: 12px;
}

.checkbox-item input[type="checkbox"] {
  margin-top: 2px;
  transform: scale(1.2);
}

.checkbox-item label {
  font-size: 14px;
  color: #374151;
  line-height: 1.4;
  cursor: default;
}

.signature-section {
  text-align: center;
  margin-top: 30px;
  padding-top: 20px;
  border-top: 1px solid #e5e7eb;
}

.signature-label {
  font-size: 14px;
  font-weight: 500;
  color: #6b7280;
}

/* Responsive */
@media (max-width: 768px) {
  .main-title {
    font-size: 2rem;
  }

  .logo {
    height: 60px;
  }

  .cards-grid {
    grid-template-columns: 1fr;
  }

  .form-grid {
    grid-template-columns: 1fr;
  }

  .checklist-grid {
    grid-template-columns: 1fr;
  }

  .modal-header-content {
    flex-direction: column;
    text-align: center;
    gap: 15px;
  }

  .modal-logo {
    height: 50px;
  }
}

@media (max-width: 480px) {
  .container {
    padding: 15px;
  }

  .header {
    padding: 15px;
  }

  .main-title {
    font-size: 1.5rem;
  }

  .search-input {
    padding: 12px 40px 12px 40px;
    font-size: 14px;
  }

  .modal-content {
    margin: 5% auto;
    width: 95%;
  }

  .modal-header,
  .modal-body {
    padding: 20px;
  }
}

</style>

<body>
    <div class="container">
        <!-- Header con logo -->
        <header class="header">
            <div class="logo-container">
                <img src="../img/Quality-BOLCA.png" alt="Quality BOLCA" class="logo">
            </div>
            <h1 class="main-title">Registro de Mantenimiento Autónomo</h1>
        </header>

        <!-- Barra de búsqueda -->
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" id="searchInput" placeholder="Buscar por nombre, región o Departamento..." class="search-input">
                <button id="clearSearch" class="clear-btn" style="display: none;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <!-- Contenedor de cartas -->
        <div id="cardsContainer" class="cards-grid">
            <!-- Las cartas se generarán dinámicamente aquí -->
        </div>

        <!-- Mensaje cuando no hay resultados -->
        <div id="noResults" class="no-results" style="display: none;">
            <i class="fas fa-search"></i>
            <h3>No se encontraron resultados</h3>
            <p>Intenta con otros términos de búsqueda</p>
        </div>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-header-content">
                    <div class="modal-logo-container">
                        <img src="../img/Quality-BOLCA.png" alt="Quality BOLCA" class="modal-logo">
                    </div>
                    <div class="modal-title-section">
                        <h2 class="modal-title">REGISTRO DE MANTENIMIENTO AUTÓNOMO</h2>
                        <div class="modal-info" style="text-align: end;">
                            <div>Código: QB-FR-A-16-01</div>
                            <div>Rev.: 01</div>
                            <div>Fecha de emisión: 10-04-2023</div>
                            <div>Fecha de revisión: 07-05-2025</div>
                        </div>
                    </div>
                </div>
                <button class="close-btn" id="closeModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="modal-body">
                <div class="form-grid">
                    <div class="form-group">
                        <label>Fecha:</label>
                        <input type="text" id="modalFecha" readonly class="form-input">
                    </div>
                    <div class="form-group">
                        <label>Región:</label>
                        <input type="text" id="modalRegion" readonly class="form-input">
                    </div>
                </div>

                <div class="form-group">
                    <label>nombre quien realiza:</label>
                    <div id="modalnombre" class="name-display"></div>
                </div>

                <div class="form-group">
                    <label>Tipo de Equipo:</label>
                    <input type="text" id="modalTipo" readonly class="form-input">
                </div>

                <div class="checklist-section">
                    <div class="checklist-header">
                        <h3>Checklist</h3>
                    </div>
                    <div class="checklist-grid" id="checklistContainer">
                        <!-- Los checkboxes se generarán dinámicamente -->
                    </div>
                </div>

                <div class="signature-section">
                    <span id="modalFirma" ></span>
                    <div class="signature-label" style="text-decoration: overline;">nombre / Firma de quien realiza</div>
                </div>
            </div>
        </div>
    </div>

</body>

<script>
    // Datos de ejemplo
const sampleData = <%- JSON.stringify(matenimientos) %>;


const checklistItems = [
  "Realizar actualizaciones",
  "Funcionamiento de altavoces (solo si aplica)",
  "Funcionamiento puertos USB",
  "Funcionamiento adaptador de red",
  "Limpieza general del equipo",
  "Funcionamiento de cámara y micrófono (solo si aplica)",
  "Funcionamiento y limpieza de teclado y mouse",
  "Funcionamiento cargador y centro de carga",
]

let filteredData = [...sampleData]

// Función para calcular la calificación
function calculateRating(respuestas) {
  const valuesArray = respuestas.split(",")
  return valuesArray.filter((value) => value.trim() === "true").length
}

// Función para obtener la clase de color de la carta
function getCardColorClass(rating) {
  if (rating >= 5) return "green"
  if (rating >= 3) return "yellow"
  return "red"
}

// Función para obtener la clase de color del badge
function getRatingBadgeClass(rating) {
  if (rating >= 5) return "green"
  if (rating >= 3) return "yellow"
  return "red"
}

// Función para crear una carta
function createCard(item, index) {
  const rating = calculateRating(item.respuestas)
  const colorClass = getCardColorClass(rating)
  const badgeClass = getRatingBadgeClass(rating)

  let nuevaFecha = new Date(item.updatedAt)
  let dia = nuevaFecha.getDate()
  let mes = nuevaFecha.getMonth() + 1
  let año = nuevaFecha.getFullYear()
  const fechaFormateada = `${dia.toString().padStart(2, '0')}/${mes.toString().padStart(2, '0')}/${año}`;

  return `
        <div class="card ${colorClass}" onclick="openModal(${index})">
            <div class="card-title">${item.nombre}</div>
            
            <div class="card-info">
                <i class="fas fa-calendar-alt"></i>
                <span>${fechaFormateada}</span>
            </div>
            
            <div class="card-info">
                <i class="fas fa-map-marker-alt"></i>
                <span>${item.region}</span>
            </div>
            
            <div class="card-rating">
                <div class="rating-label">
                    <i class="fas fa-star"></i>
                    <span>Calificación:</span>
                </div>
                <span class="rating-badge ${badgeClass}">${rating}/8</span>
            </div>
            
            <button class="show-info-btn" onclick="event.stopPropagation(); openModal(${index})">
                Mostrar información
            </button>
        </div>
    `
}

// Función para renderizar las cartas
function renderCards(data = filteredData) {
  const container = document.getElementById("cardsContainer")
  const noResults = document.getElementById("noResults")

  if (data.length === 0) {
    container.innerHTML = ""
    noResults.style.display = "block"
  } else {
    noResults.style.display = "none"
    container.innerHTML = data
      .map((item, index) => {
        // Encontrar el índice original en sampleData
        const originalIndex = sampleData.findIndex(
          (original) => original.nombre === item.nombre && original.fecha === item.fecha,
        )
        return createCard(item, originalIndex)
      })
      .join("")
  }
}

// Función para abrir el modal
function openModal(index) {
  const item = sampleData[index]
  const modal = document.getElementById("modal")

  console.log(item.nombre, item.respuestas);

  let nuevaFecha = new Date(item.updatedAt)
  let dia = nuevaFecha.getDate()
  let mes = nuevaFecha.getMonth() + 1
  let año = nuevaFecha.getFullYear()
  const fechaFormateada = `${dia.toString().padStart(2, '0')}/${mes.toString().padStart(2, '0')}/${año}`;

  // Llenar los campos del modal
  document.getElementById("modalFecha").value = fechaFormateada
  document.getElementById("modalRegion").value = item.region
  document.getElementById("modalnombre").textContent = item.nombre
  document.getElementById("modalTipo").value = item.tipo
  document.getElementById('modalFirma').textContent = item.nombre

  // Crear los checkboxes
  const checklistContainer = document.getElementById("checklistContainer")
  const valuesArray = item.respuestas.split(",")

  checklistContainer.innerHTML = checklistItems
    .map((checkItem, index) => {
      const isChecked = valuesArray[index]?.trim() === "true"
      return `
            <div class="checkbox-item">
                <input type="checkbox" ${!isChecked ? "" : "checked"} disabled>
                <label>${checkItem}</label>
            </div>
        `
    })
    .join("")

  modal.style.display = "block"
}

// Función para cerrar el modal
function closeModal() {
  document.getElementById("modal").style.display = "none"
}

// Función de búsqueda
const buscador = document.getElementById("searchInput")

buscador.addEventListener("search", e => {
    e.target.value = ""
    document.querySelectorAll(".card").forEach(fruta => {

fruta.textContent.toLowerCase().includes(e.target.value.toLowerCase())
? fruta.classList.remove("hidden")
: fruta.classList.add("hidden")
})
})

buscador.addEventListener("keyup", e => {


        if (e.key === "Escape") e.target.value = ""


        document.querySelectorAll(".card").forEach(fruta => {

            fruta.textContent.toLowerCase().includes(e.target.value.toLowerCase())
                ? fruta.classList.remove("hidden")
                : fruta.classList.add("hidden")
        })
})

// Event listeners
document.addEventListener("DOMContentLoaded", () => {
  // Renderizar cartas iniciales
  renderCards()

  // Búsqueda
  const searchInput = document.getElementById("searchInput")
  const clearBtn = document.getElementById("clearSearch")

  searchInput.addEventListener("input", function () {
    const searchTerm = this.value
    filterData(searchTerm)

    // Mostrar/ocultar botón de limpiar
    if (searchTerm.trim()) {
      clearBtn.style.display = "block"
    } else {
      clearBtn.style.display = "none"
    }
  })

  // Limpiar búsqueda
  clearBtn.addEventListener("click", () => {
    searchInput.value = ""
    clearBtn.style.display = "none"
    filterData("")
  })

  // Cerrar modal
  document.getElementById("closeModal").addEventListener("click", closeModal)

  // Cerrar modal al hacer clic fuera
  window.addEventListener("click", (event) => {
    const modal = document.getElementById("modal")
    if (event.target === modal) {
      closeModal()
    }
  })

  // Cerrar modal con Escape
  document.addEventListener("keydown", (event) => {
    if (event.key === "Escape") {
      closeModal()
    }
  })
})

// Hacer las funciones globales para que puedan ser llamadas desde el HTML
window.openModal = openModal
window.closeModal = closeModal

</script>
</html>
