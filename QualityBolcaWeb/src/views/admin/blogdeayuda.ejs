<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Foro Empresarial</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>

<style>
    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  background-color: #f9fafb;
  color: #111827;
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

/* Header */
.header {
  margin-bottom: 2rem;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
}

.header-text h1 {
  font-size: 2rem;
  font-weight: 700;
  color: #111827;
  margin-bottom: 0.5rem;
}

.header-text p {
  color: #6b7280;
}

/* Buttons */
.btn-primary {
  background-color: #3b82f6;
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: background-color 0.2s;
}

.btn-primary:hover {
  background-color: #2563eb;
}

.btn-secondary {
  background-color: #f3f4f6;
  color: #374151;
  border: 1px solid #d1d5db;
  padding: 0.75rem 1.5rem;
  border-radius: 0.5rem;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s;
}

.btn-secondary:hover {
  background-color: #e5e7eb;
}

.btn-ghost {
  background: none;
  border: none;
  color: #3b82f6;
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  transition: background-color 0.2s;
}

.btn-ghost:hover {
  background-color: #f3f4f6;
}

/* Stats Grid */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: white;
  border-radius: 0.5rem;
  padding: 1.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.stat-content {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.stat-icon {
  font-size: 2rem;
}

.stat-icon.blue {
  color: #3b82f6;
}
.stat-icon.green {
  color: #10b981;
}
.stat-icon.orange {
  color: #f59e0b;
}

.stat-number {
  font-size: 2rem;
  font-weight: 700;
}

.stat-label {
  font-size: 0.875rem;
  color: #6b7280;
}

/* Posts */
.posts-container {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.post-card {
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  transition: box-shadow 0.2s;
}

.post-card:hover {
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.post-header {
  padding: 1.5rem;
  border-bottom: 1px solid #f3f4f6;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.post-info {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex: 1;
}

.avatar {
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  background-color: #3b82f6;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 1.125rem;
}

.post-details h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.post-meta {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 0.875rem;
  color: #6b7280;
  flex-wrap: wrap;
}

.badge {
  background-color: #f3f4f6;
  color: #374151;
  padding: 0.25rem 0.75rem;
  border-radius: 9999px;
  font-size: 0.75rem;
  font-weight: 500;
}

.post-stats {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: #6b7280;
  font-size: 0.875rem;
}

.toggle-icon {
  margin-left: 1rem;
  color: #6b7280;
  transition: transform 0.2s;
}

.toggle-icon.expanded {
  transform: rotate(180deg);
}

.post-content {
  padding: 0 1.5rem 1.5rem;
  display: none;
}

.post-content.expanded {
  display: block;
}

.post-description {
  color: #374151;
  margin-bottom: 1rem;
  line-height: 1.6;
}

.post-actions {
  margin-bottom: 1rem;
}

/* Replies */
.replies-container {
  margin-top: 1rem;
}

.reply {
  border-left: 2px solid #e5e7eb;
  margin-left: 1rem;
  padding-left: 1rem;
  margin-top: 1rem;
}

.reply-content {
  background-color: #f9fafb;
  border-radius: 0.5rem;
  padding: 1rem;
}

.reply-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 0.75rem;
}

.reply-avatar {
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  background-color: #6b7280;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 0.75rem;
}

.reply-meta {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.75rem;
  color: #6b7280;
  flex-wrap: wrap;
}

.reply-text {
  color: #374151;
  margin-bottom: 0.75rem;
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.modal.active {
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: white;
  border-radius: 0.5rem;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.5rem;
  border-bottom: 1px solid #f3f4f6;
}

.modal-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.25rem;
  color: #6b7280;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 0.25rem;
}

.close-btn:hover {
  background-color: #f3f4f6;
}

/* Form */
.form {
  padding: 1.5rem;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #374151;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  transition: border-color 0.2s;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 1.5rem;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 3rem 1rem;
}

.empty-icon {
  font-size: 4rem;
  color: #d1d5db;
  margin-bottom: 1rem;
}

.empty-state h3 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #6b7280;
  margin-bottom: 0.5rem;
}

.empty-state p {
  color: #9ca3af;
  margin-bottom: 1rem;
}

/* Responsive */
@media (max-width: 768px) {
  .container {
    padding: 1rem;
  }

  .header-content {
    flex-direction: column;
    align-items: stretch;
  }

  .form-row {
    grid-template-columns: 1fr;
  }

  .post-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .post-info {
    width: 100%;
  }

  .form-actions {
    flex-direction: column;
  }
}

</style>

<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-text">
                    <h1>Foro Empresarial</h1>
                    <p>Comparte problemáticas y encuentra soluciones colaborativas</p>
                </div>
                <button class="btn-primary" id="newPostBtn">
                    <i class="fas fa-plus"></i>
                    Nueva Publicación
                </button>
            </div>
        </header>

        <!-- Stats -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-content">
                    <i class="fas fa-comments stat-icon blue"></i>
                    <div>
                        <div class="stat-number" id="totalPosts">0</div>
                        <div class="stat-label">Publicaciones Activas</div>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-content">
                    <i class="fas fa-users stat-icon green"></i>
                    <div>
                        <div class="stat-number" id="totalDepartments">7</div>
                        <div class="stat-label">Departamentos</div>
                    </div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-content">
                    <i class="fas fa-clock stat-icon orange"></i>
                    <div>
                        <div class="stat-number" id="totalReplies">0</div>
                        <div class="stat-label">Respuestas Totales</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Posts Container -->
        <div id="postsContainer" class="posts-container">
            <!-- Posts will be dynamically inserted here -->
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="empty-state" style="display: none;">
            <i class="fas fa-comments empty-icon"></i>
            <h3>No hay publicaciones aún</h3>
            <p>Sé el primero en compartir una problemática</p>
            <button class="btn-primary" onclick="openNewPostModal()">Crear Primera Publicación</button>
        </div>
    </div>

    <!-- New Post Modal -->
    <div id="newPostModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Crear Nueva Publicación</h2>
                <button class="close-btn" onclick="closeNewPostModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="newPostForm" class="form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="authorName">Tu Nombre</label>
                        <input type="text" id="authorName" placeholder="Ej: María González" required>
                    </div>
                    <div class="form-group">
                        <label for="authorDepartment">Departamento</label>
                        <select id="authorDepartment" required>
                            <option value="">Selecciona tu departamento</option>
                            <option value="Tecnologías">Tecnologías</option>
                            <option value="Recursos Humanos">Recursos Humanos</option>
                            <option value="Mantenimiento">Mantenimiento</option>
                            <option value="Contabilidad">Contabilidad</option>
                            <option value="Administración">Administración</option>
                            <option value="Ventas">Ventas</option>
                            <option value="Marketing">Marketing</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="postTitle">Título de la Problemática</label>
                    <input type="text" id="postTitle" placeholder="Ej: Problema con el sistema de climatización" required>
                </div>
                <div class="form-group">
                    <label for="postContent">Descripción Detallada</label>
                    <textarea id="postContent" rows="4" placeholder="Describe el problema en detalle, qué has intentado y qué tipo de ayuda necesitas..." required></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="closeNewPostModal()">Cancelar</button>
                    <button type="submit" class="btn-primary">Publicar Problemática</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Reply Modal -->
    <div id="replyModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Responder</h2>
                <button class="close-btn" onclick="closeReplyModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="replyForm" class="form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="replyAuthorName">Tu Nombre</label>
                        <input type="text" id="replyAuthorName" placeholder="Tu nombre" required>
                    </div>
                    <div class="form-group">
                        <label for="replyAuthorDepartment">Departamento</label>
                        <select id="replyAuthorDepartment" required>
                            <option value="">Tu departamento</option>
                            <option value="Tecnologías">Tecnologías</option>
                            <option value="Recursos Humanos">Recursos Humanos</option>
                            <option value="Mantenimiento">Mantenimiento</option>
                            <option value="Contabilidad">Contabilidad</option>
                            <option value="Administración">Administración</option>
                            <option value="Ventas">Ventas</option>
                            <option value="Marketing">Marketing</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="replyContent">Tu Respuesta</label>
                    <textarea id="replyContent" rows="3" placeholder="Escribe tu respuesta..." required></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-secondary" onclick="closeReplyModal()">Cancelar</button>
                    <button type="submit" class="btn-primary">Responder</button>
                </div>
            </form>
        </div>
    </div>

    <script src="data.js"></script>
    <script src="script.js"></script>
</body>



<script>
const initialPosts = [
  {
    id: 1,
    title: "Actualización del color de los focos en oficinas",
    content:
      "El departamento de tecnologías necesita cambiar el color de los focos de las oficinas principales. No sabemos qué tipo de iluminación sería más adecuada para mejorar la productividad.",
    author: "María González",
    department: "Tecnologías",
    timestamp: "Hace 2 horas",
    replies: [
      {
        id: 1,
        content:
          "Recomiendo usar luces LED de temperatura cálida (3000K) para las áreas de trabajo. Son más eficientes energéticamente.",
        author: "Carlos Ruiz",
        department: "Mantenimiento",
        timestamp: "Hace 1 hora",
        replies: [
          {
            id: 1,
            content:
              "Estoy de acuerdo con Carlos. También podríamos considerar luces regulables para diferentes momentos del día.",
            author: "Ana López",
            department: "Recursos Humanos",
            timestamp: "Hace 30 min",
            replies: [],
          },
        ],
      },
      {
        id: 2,
        content:
          "En mi experiencia, las luces de espectro completo mejoran el estado de ánimo. Podríamos hacer una prueba piloto en una oficina.",
        author: "Roberto Silva",
        department: "Administración",
        timestamp: "Hace 45 min",
        replies: [],
      },
    ],
  },
  {
    id: 2,
    title: "Problema con el sistema de climatización",
    content:
      "La temperatura en el piso 3 está muy alta durante las tardes. Los empleados se quejan del calor excesivo.",
    author: "Pedro Martínez",
    department: "Mantenimiento",
    timestamp: "Hace 4 horas",
    replies: [
      {
        id: 1,
        content: "He notado lo mismo. Creo que el termostato necesita calibración.",
        author: "Laura Fernández",
        department: "Contabilidad",
        timestamp: "Hace 3 horas",
        replies: [],
      },
    ],
  },
]

const departments = [
  "Tecnologías",
  "Recursos Humanos",
  "Mantenimiento",
  "Contabilidad",
  "Administración",
  "Ventas",
  "Marketing",
]
</script>

<script>
    // Estado global de la aplicación
// Declare initialPosts variable
const posts = [...initialPosts]
let currentReplyTarget = null

// Inicialización
document.addEventListener("DOMContentLoaded", () => {
  renderPosts()
  updateStats()
  setupEventListeners()
})

// Event Listeners
function setupEventListeners() {
  // Botón nueva publicación
  document.getElementById("newPostBtn").addEventListener("click", openNewPostModal)

  // Formulario nueva publicación
  document.getElementById("newPostForm").addEventListener("submit", handleNewPost)

  // Formulario respuesta
  document.getElementById("replyForm").addEventListener("submit", handleNewReply)

  // Cerrar modales al hacer click fuera
  document.getElementById("newPostModal").addEventListener("click", function (e) {
    if (e.target === this) closeNewPostModal()
  })

  document.getElementById("replyModal").addEventListener("click", function (e) {
    if (e.target === this) closeReplyModal()
  })
}

// Funciones de renderizado
function renderPosts() {
  const container = document.getElementById("postsContainer")
  const emptyState = document.getElementById("emptyState")

  if (posts.length === 0) {
    container.style.display = "none"
    emptyState.style.display = "block"
    return
  }

  container.style.display = "block"
  emptyState.style.display = "none"

  container.innerHTML = posts.map((post) => createPostHTML(post)).join("")

  // Agregar event listeners para toggle y respuestas
  posts.forEach((post) => {
    const postElement = document.getElementById(`post-${post.id}`)
    const header = postElement.querySelector(".post-header")
    const content = postElement.querySelector(".post-content")
    const toggleIcon = postElement.querySelector(".toggle-icon")

    header.addEventListener("click", () => {
      const isExpanded = content.classList.contains("expanded")
      content.classList.toggle("expanded")
      toggleIcon.classList.toggle("expanded")
    })

    // Event listeners para botones de respuesta
    addReplyEventListeners(post.id, [])
  })
}

function createPostHTML(post) {
  const totalReplies = countReplies(post.replies)

  return `
        <div class="post-card" id="post-${post.id}">
            <div class="post-header">
                <div class="post-info">
                    <div class="avatar">${getInitials(post.author)}</div>
                    <div class="post-details">
                        <h3>${post.title}</h3>
                        <div class="post-meta">
                            <span>${post.author}</span>
                            <span class="badge">${post.department}</span>
                            <i class="fas fa-clock"></i>
                            <span>${post.timestamp}</span>
                        </div>
                    </div>
                </div>
                <div style="display: flex; align-items: center;">
                    <div class="post-stats">
                        <i class="fas fa-comments"></i>
                        <span>${totalReplies}</span>
                    </div>
                    <i class="fas fa-chevron-down toggle-icon"></i>
                </div>
            </div>
            <div class="post-content">
                <p class="post-description">${post.content}</p>
                <div class="post-actions">
                    <button class="btn-ghost" onclick="openReplyModal(${post.id}, [])">
                        <i class="fas fa-reply"></i>
                        Responder
                    </button>
                </div>
                <div class="replies-container">
                    ${post.replies.map((reply, index) => createReplyHTML(reply, post.id, [index])).join("")}
                </div>
            </div>
        </div>
    `
}

function createReplyHTML(reply, postId, replyPath) {
  return `
        <div class="reply">
            <div class="reply-content">
                <div class="reply-header">
                    <div class="reply-avatar">${getInitials(reply.author)}</div>
                    <div>
                        <div style="font-weight: 500; font-size: 0.875rem;">${reply.author}</div>
                        <div class="reply-meta">
                            <span class="badge">${reply.department}</span>
                            <i class="fas fa-clock"></i>
                            <span>${reply.timestamp}</span>
                        </div>
                    </div>
                </div>
                <p class="reply-text">${reply.content}</p>
                <button class="btn-ghost" onclick="openReplyModal(${postId}, ${JSON.stringify(replyPath)})">
                    <i class="fas fa-reply"></i>
                    Responder
                </button>
                ${reply.replies
                  .map((nestedReply, index) => createReplyHTML(nestedReply, postId, [...replyPath, index]))
                  .join("")}
            </div>
        </div>
    `
}

// Funciones auxiliares
function getInitials(name) {
  return name
    .split(" ")
    .map((n) => n[0])
    .join("")
    .toUpperCase()
}

function countReplies(replies) {
  return replies.reduce((count, reply) => count + 1 + countReplies(reply.replies), 0)
}

function updateStats() {
  document.getElementById("totalPosts").textContent = posts.length
  document.getElementById("totalReplies").textContent = posts.reduce(
    (total, post) => total + countReplies(post.replies),
    0,
  )
}

function addReplyEventListeners(postId, replyPath) {
  // Esta función se llama desde renderPosts para agregar listeners dinámicamente
}

// Funciones de modal
function openNewPostModal() {
  document.getElementById("newPostModal").classList.add("active")
}

function closeNewPostModal() {
  document.getElementById("newPostModal").classList.remove("active")
  document.getElementById("newPostForm").reset()
}

function openReplyModal(postId, replyPath) {
  currentReplyTarget = { postId, replyPath }
  document.getElementById("replyModal").classList.add("active")
}

function closeReplyModal() {
  document.getElementById("replyModal").classList.remove("active")
  document.getElementById("replyForm").reset()
  currentReplyTarget = null
}

// Manejo de formularios
function handleNewPost(e) {
  e.preventDefault()

  const formData = new FormData(e.target)
  const newPost = {
    id: Date.now(),
    title: document.getElementById("postTitle").value,
    content: document.getElementById("postContent").value,
    author: document.getElementById("authorName").value,
    department: document.getElementById("authorDepartment").value,
    timestamp: "Ahora",
    replies: [],
  }

  posts.unshift(newPost)
  renderPosts()
  updateStats()
  closeNewPostModal()
}

function handleNewReply(e) {
  e.preventDefault()

  if (!currentReplyTarget) return

  const newReply = {
    id: Date.now(),
    content: document.getElementById("replyContent").value,
    author: document.getElementById("replyAuthorName").value,
    department: document.getElementById("replyAuthorDepartment").value,
    timestamp: "Ahora",
    replies: [],
  }

  const { postId, replyPath } = currentReplyTarget
  const post = posts.find((p) => p.id === postId)

  if (post) {
    let targetReplies = post.replies

    // Navegar hasta el nivel correcto de respuestas anidadas
    for (let i = 0; i < replyPath.length - 1; i++) {
      targetReplies = targetReplies[replyPath[i]].replies
    }

    if (replyPath.length === 0) {
      post.replies.push(newReply)
    } else {
      targetReplies[replyPath[replyPath.length - 1]].replies.push(newReply)
    }
  }

  renderPosts()
  updateStats()
  closeReplyModal()
}

// Función para exportar datos (opcional)
function exportData() {
  const dataStr = JSON.stringify(posts, null, 2)
  const dataBlob = new Blob([dataStr], { type: "application/json" })
  const url = URL.createObjectURL(dataBlob)
  const link = document.createElement("a")
  link.href = url
  link.download = "forum-data.json"
  link.click()
}

</script>
</html>

