<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calendario de Vacaciones</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Añadimos jsPDF para generar PDFs -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
</head>

<style>
    /* Estilos generales */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body {
    background-color: #f8f9fa;
    color: #333;
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.bold {
    font-weight: bold;
}

.hidden {
    display: none !important;
}

/* Header */
.header {
    background-color: #2563eb;
    color: white;
    padding: 24px 0;
    text-align: center;
}

.header h1 {
    font-size: 2rem;
    margin-bottom: 8px;
}

.user-name {
    font-size: 1.25rem;
    margin-bottom: 16px;
}

.days-available {
    display: inline-block;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 9999px;
    padding: 8px 16px;
}

/* Contenido principal */
.main-content {
    display: flex;
    flex-direction: column;
}

@media (min-width: 1024px) {
    .main-content {
        flex-direction: row;
    }
}

/* Calendario */
.calendar-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
    flex-grow: 1;
}

@media (min-width: 768px) {
    .calendar-container {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (min-width: 1024px) {
    .calendar-container {
        grid-template-columns: repeat(3, 1fr);
    }
}

.calendar-month {
    background-color: #e6f0ff;
    border-radius: 8px;
    padding: 16px;
}

.calendar-month h2 {
    text-align: center;
    margin-bottom: 16px;
    font-size: 1.25rem;
}

.calendar-grid {
    display: grid;
    grid-template-columns: repeat(8, 1fr); /* Añadimos una columna extra para el botón de PDF */
    gap: 4px;
}

.calendar-header {
    display: grid;
    grid-template-columns: repeat(8, 1fr); /* Añadimos una columna extra para el encabezado de PDF */
    gap: 4px;
    margin-bottom: 8px;
}

.calendar-header div {
    text-align: center;
    font-weight: 500;
}

.calendar-day {
    text-align: center;
    padding: 4px;
    border-radius: 4px;
    cursor: pointer;
}

.calendar-day.empty {
    cursor: default;
}

.calendar-day.selected {
    background-color: #2563eb;
    color: white;
}

.pdf-button {
    background-color: #ef4444;
    color: white;
    border: none;
    border-radius: 4px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
    margin: auto;
}

.pdf-button:hover {
    background-color: #dc2626;
}

.details-button {
    display: block;
    margin: 16px auto 0;
    background-color: #2563eb;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 16px;
    cursor: pointer;
    font-weight: 500;
}

.details-button:hover {
    background-color: #1d4ed8;
}

/* Panel de fechas seleccionadas */
.selected-dates-panel {
    background-color: white;
    border-radius: 8px;
    padding: 24px;
    border: 1px solid #e5e7eb;
    margin-top: 32px;
}

@media (min-width: 1024px) {
    .selected-dates-panel {
        width: 25%;
        margin-left: 32px;
        margin-top: 0;
    }
}

.selected-dates-panel h2 {
    font-size: 1.25rem;
    margin-bottom: 16px;
}

.selected-dates-list {
    margin-bottom: 16px;
}

.empty-message {
    color: #6b7280;
}

.selected-date-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px;
    border-bottom: 1px solid #f3f4f6;
}

.remove-date {
    background: none;
    border: none;
    color: #6b7280;
    cursor: pointer;
}

.remove-date:hover {
    color: #374151;
}

.total-days {
    margin-top: 16px;
    padding-top: 8px;
    border-top: 1px solid #e5e7eb;
    font-weight: 500;
}

.submit-button {
    width: 100%;
    margin-top: 24px;
    background-color: #2563eb;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px;
    cursor: pointer;
    font-weight: 500;
}

.submit-button:hover:not(:disabled) {
    background-color: #1d4ed8;
}

.submit-button:disabled {
    background-color: #93c5fd;
    cursor: not-allowed;
}

/* Modal */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    border-radius: 8px;
    padding: 24px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.close-button {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #6b7280;
}

.close-button:hover {
    color: #374151;
}

.colaborador {
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 12px;
    margin-bottom: 12px;
}

.colaborador h3 {
    font-size: 1.125rem;
    margin-bottom: 4px;
}

.colaborador p {
    color: #6b7280;
}

.dates-array {
    background-color: #f3f4f6;
    padding: 16px;
    border-radius: 4px;
    margin-top: 12px;
    white-space: pre-wrap;
    word-break: break-all;
}
</style>

<body>
    <!-- Header -->
    <header class="header">
        <h1>Calendario de Vacaciones</h1>
        <p class="user-name">Juan Pérez</p>
        <div class="days-available">
            <span>Días disponibles: </span>
            <span id="available-days" class="bold">10</span>
        </div>
    </header>

    <div class="container">
        <div class="main-content">
            <!-- Calendario (se llenará con JavaScript) -->
            <div id="calendar-container" class="calendar-container"></div>

            <!-- Panel lateral de fechas seleccionadas -->
            <div class="selected-dates-panel">
                <h2>Fechas seleccionadas</h2>
                <div id="selected-dates-list" class="selected-dates-list">
                    <p class="empty-message">No hay fechas seleccionadas</p>
                </div>
                <div id="total-days" class="total-days hidden">
                    <p>Total: <span id="total-count">0</span> días</p>
                </div>
                <button id="submit-button" class="submit-button" disabled>Enviar solicitud</button>
            </div>
        </div>
    </div>

    <!-- Modal de detalles -->
    <div id="details-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modal-title">Detalles de Vacaciones</h2>
                <button id="close-modal" class="close-button">&times;</button>
            </div>
            <div id="modal-body" class="modal-body"></div>
        </div>
    </div>

    <!-- Modal para mostrar el array de fechas -->
    <div id="array-modal" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Array de Fechas Seleccionadas</h2>
                <button id="close-array-modal" class="close-button">&times;</button>
            </div>
            <div class="modal-body">
                <p>Las fechas seleccionadas en formato díaDelAño + año son:</p>
                <pre id="dates-array" class="dates-array"></pre>
            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>

<script>
    // Datos de ejemplo para los colaboradores
const colaboradores = {
    "Marzo 2025": [
        { nombre: "Ana García", dias: ["5", "6", "7"] },
        { nombre: "Carlos López", dias: ["12", "13", "14"] },
    ],
    "Abril 2025": [
        { nombre: "María Rodríguez", dias: ["17", "18", "19"] },
        { nombre: "Pedro Sánchez", dias: ["24", "25", "26"] },
    ],
    "Mayo 2025": [
        { nombre: "Laura Martínez", dias: ["1", "2", "3"] },
        { nombre: "Javier Fernández", dias: ["22", "23", "24"] },
    ],
    "Junio 2025": [
        { nombre: "Elena Díaz", dias: ["5", "6", "7"] },
        { nombre: "Roberto Pérez", dias: ["19", "20", "21"] },
    ],
    "Julio 2025": [
        { nombre: "Sofía Ruiz", dias: ["3", "4", "5"] },
        { nombre: "Daniel Gómez", dias: ["16", "17", "18"] },
    ],
    "Agosto 2025": [
        { nombre: "Carmen Jiménez", dias: ["7", "8", "9"] },
        { nombre: "Miguel Torres", dias: ["21", "22", "23"] },
    ],
    "Septiembre 2025": [
        { nombre: "Isabel Navarro", dias: ["4", "5", "6"] },
        { nombre: "Francisco Moreno", dias: ["18", "19", "20"] },
    ],
    "Octubre 2025": [
        { nombre: "Lucía Álvarez", dias: ["2", "3", "4"] },
        { nombre: "Antonio Romero", dias: ["16", "17", "18"] },
    ],
    "Noviembre 2025": [
        { nombre: "Raquel Serrano", dias: ["6", "7", "8"] },
        { nombre: "José Molina", dias: ["20", "21", "22"] },
    ],
    "Diciembre 2025": [
        { nombre: "Cristina Ortega", dias: ["4", "5", "6"] },
        { nombre: "Alberto Delgado", dias: ["18", "19", "20"] },
    ],
    "Enero 2026": [
        { nombre: "Natalia Vega", dias: ["8", "9", "10"] },
        { nombre: "Alejandro Castro", dias: ["22", "23", "24"] },
    ],
    "Febrero 2026": [
        { nombre: "Beatriz Reyes", dias: ["5", "6", "7"] },
        { nombre: "Guillermo Ortiz", dias: ["19", "20", "21"] },
    ],
};

// Variables globales
let selectedDates = [];
let selectedDatesArray = [];
let diasDisponibles = 10;
let months = [];
let currentYear = new Date().getFullYear();

// Elementos del DOM
const calendarContainer = document.getElementById('calendar-container');
const selectedDatesList = document.getElementById('selected-dates-list');
const totalDaysElement = document.getElementById('total-days');
const totalCountElement = document.getElementById('total-count');
const availableDaysElement = document.getElementById('available-days');
const submitButton = document.getElementById('submit-button');
const detailsModal = document.getElementById('details-modal');
const modalTitle = document.getElementById('modal-title');
const modalBody = document.getElementById('modal-body');
const closeModalButton = document.getElementById('close-modal');
const arrayModal = document.getElementById('array-modal');
const datesArrayElement = document.getElementById('dates-array');
const closeArrayModalButton = document.getElementById('close-array-modal');

// Inicializar la aplicación
document.addEventListener('DOMContentLoaded', () => {
    initializeMonths();
    renderCalendars();
    setupEventListeners();
});

// Función para inicializar los meses
function initializeMonths() {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth(); // 0-11
    const monthNames = [
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    ];

    let year = currentDate.getFullYear();
    let startMonth = currentMonth - 1;

    if (startMonth < 0) {
        startMonth = 11; // Diciembre
        year -= 1;
    }

    months = [];
    for (let i = 0; i < 12; i++) {
        const monthIndex = (startMonth + i) % 12;
        const monthYear = year + Math.floor((startMonth + i) / 12);
        months.push(`${monthNames[monthIndex]} ${monthYear}`);
    }

    currentYear = year;
}

// Función para renderizar los calendarios
function renderCalendars() {
    calendarContainer.innerHTML = '';

    months.forEach(month => {
        const [monthName, yearStr] = month.split(' ');
        const year = parseInt(yearStr);
        const monthIndex = [
            "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
            "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
        ].indexOf(monthName);

        const calendarMonth = document.createElement('div');
        calendarMonth.className = 'calendar-month';
        calendarMonth.innerHTML = `
            <h2>${month}</h2>
            <div class="calendar-header">
                <div>D</div>
                <div>L</div>
                <div>M</div>
                <div>M</div>
                <div>J</div>
                <div>V</div>
                <div>S</div>
                <div>PDF</div>
            </div>
            <div class="calendar-grid" id="grid-${monthName}-${year}"></div>
            <button class="details-button" data-month="${month}">Ver detalles</button>
        `;

        calendarContainer.appendChild(calendarMonth);

        // Generar el calendario para este mes
        generateCalendarGrid(monthName, monthIndex, year);
    });
}

// Función para generar la cuadrícula del calendario
function generateCalendarGrid(monthName, monthIndex, year) {
    const gridElement = document.getElementById(`grid-${monthName}-${year}`);
    const firstDay = new Date(year, monthIndex, 1);
    const lastDay = new Date(year, monthIndex + 1, 0);
    const daysInMonth = lastDay.getDate();

    // Ajustar el día de la semana (0 = Domingo, 1 = Lunes, ..., 6 = Sábado)
    // Convertir a formato donde Lunes es el primer día (0)
    let firstDayOfWeek = firstDay.getDay() - 1;
    if (firstDayOfWeek === -1) firstDayOfWeek = 6; // Si es domingo (0), convertir a 6

    let currentWeek = [];
    let weekNumber = 0;
    let currentRow = document.createElement('div');
    currentRow.className = 'calendar-week';
    currentRow.style.display = 'contents';
    currentRow.dataset.weekNumber = weekNumber;
    currentRow.dataset.month = monthName;
    currentRow.dataset.year = year;

    // Agregar días vacíos al principio
    for (let i = 0; i < firstDayOfWeek; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day empty';
        currentRow.appendChild(emptyDay);
        currentWeek.push(null);
    }

    // Agregar los días del mes
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        dayElement.textContent = day;
        dayElement.dataset.day = day;
        dayElement.dataset.month = monthName;
        dayElement.dataset.year = year;

        // Verificar si la fecha está seleccionada
        const dateString = `${day} de ${monthName}, ${year}`;
        if (selectedDates.includes(dateString)) {
            dayElement.classList.add('selected');
        }

        // Agregar evento de clic
        dayElement.addEventListener('click', () => handleDateClick(day, monthName, year));

        currentRow.appendChild(dayElement);
        currentWeek.push(day);

        // Si es sábado o el último día del mes, añadir botón de PDF y comenzar nueva semana
        if ((currentWeek.length === 7) || (day === daysInMonth)) {
            // Añadir botón de PDF para esta semana
            const pdfButton = document.createElement('button');
            pdfButton.className = 'pdf-button';
            pdfButton.innerHTML = 'PDF';
            pdfButton.dataset.weekNumber = weekNumber;
            pdfButton.dataset.month = monthName;
            pdfButton.dataset.year = year;
            pdfButton.dataset.startDay = currentWeek.filter(d => d !== null)[0];
            pdfButton.dataset.endDay = currentWeek.filter(d => d !== null).pop();
            
            pdfButton.addEventListener('click', () => {
                generateWeeklyPDF(
                    currentWeek.filter(d => d !== null),
                    monthName,
                    year,
                    weekNumber
                );
            });
            
            currentRow.appendChild(pdfButton);
            
            // Añadir la fila actual al grid
            gridElement.appendChild(currentRow);
            
            // Preparar para la siguiente semana
            currentWeek = [];
            weekNumber++;
            
            if (day < daysInMonth) {
                currentRow = document.createElement('div');
                currentRow.className = 'calendar-week';
                currentRow.style.display = 'contents';
                currentRow.dataset.weekNumber = weekNumber;
                currentRow.dataset.month = monthName;
                currentRow.dataset.year = year;
            }
        }
    }

    // Si la última semana no está completa, añadir celdas vacías
    if (currentWeek.length > 0 && currentWeek.length < 7) {
        const remainingDays = 7 - currentWeek.length;
        for (let i = 0; i < remainingDays; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day empty';
            currentRow.appendChild(emptyDay);
        }
    }
}

// Función para generar PDF de la semana
function generateWeeklyPDF(days, monthName, year, weekNumber) {
    // Importar jsPDF desde la variable global
    const { jsPDF } = window.jspdf;
    
    // Crear un nuevo documento PDF
    const doc = new jsPDF();
    
    // Título del documento
    doc.setFontSize(18);
    doc.text(`Vacaciones: Semana ${weekNumber + 1} de ${monthName} ${year}`, 14, 20);
    
    // Subtítulo con el rango de días
    doc.setFontSize(12);
    doc.text(`Días: ${days[0]} al ${days[days.length - 1]} de ${monthName}`, 14, 30);
    
    // Buscar colaboradores que tienen vacaciones en esta semana
    const colaboradoresEnSemana = getColaboradoresEnSemana(days, monthName, year);
    
    if (colaboradoresEnSemana.length === 0) {
        doc.text("No hay solicitudes de vacaciones para esta semana.", 14, 40);
    } else {
        // Crear tabla con los datos
        const tableColumn = ["Nombre", "Días solicitados"];
        const tableRows = [];
        
        colaboradoresEnSemana.forEach(colaborador => {
            tableRows.push([
                colaborador.nombre,
                colaborador.diasEnSemana.join(", ")
            ]);
        });
        
        // Generar la tabla
        doc.autoTable({
            startY: 40,
            head: [tableColumn],
            body: tableRows,
            theme: 'grid',
            headStyles: {
                fillColor: [37, 99, 235],
                textColor: 255,
                fontStyle: 'bold'
            },
            styles: {
                fontSize: 10,
                cellPadding: 3
            }
        });
    }
    
    // Guardar el PDF
    doc.save(`vacaciones_semana_${weekNumber + 1}_${monthName}_${year}.pdf`);
}

// Función para obtener colaboradores con vacaciones en una semana específica
function getColaboradoresEnSemana(days, monthName, year) {
    const monthData = colaboradores[`${monthName} ${year}`] || [];
    const colaboradoresEnSemana = [];
    
    monthData.forEach(colaborador => {
        // Filtrar los días que están en la semana actual
        const diasEnSemana = colaborador.dias.filter(dia => days.includes(parseInt(dia)));
        
        if (diasEnSemana.length > 0) {
            colaboradoresEnSemana.push({
                nombre: colaborador.nombre,
                diasEnSemana: diasEnSemana
            });
        }
    });
    
    return colaboradoresEnSemana;
}

// Función para manejar el clic en una fecha
function handleDateClick(day, monthName, year) {
    const dateString = `${day} de ${monthName}, ${year}`;
    const dateIndex = selectedDates.indexOf(dateString);

    // Obtener el día del año
    const monthIndex = [
        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
    ].indexOf(monthName);
    
    const date = new Date(year, monthIndex, day);
    const startOfYear = new Date(year, 0, 0);
    const diff = date.getTime() - startOfYear.getTime();
    const dayOfYear = Math.floor(diff / (1000 * 60 * 60 * 24));

    // Crear el formato solicitado: día del año + año
    const dateCode = `${dayOfYear}${year}`;
    const dateCodeIndex = selectedDatesArray.indexOf(dateCode);

    if (dateIndex === -1) {
        // Si no está seleccionada, agregarla
        selectedDates.push(dateString);
        selectedDatesArray.push(dateCode);
        diasDisponibles--;
    } else {
        // Si ya está seleccionada, quitarla
        selectedDates.splice(dateIndex, 1);
        selectedDatesArray.splice(dateCodeIndex, 1);
        diasDisponibles++;
    }

    // Actualizar la UI
    updateUI();
}

// Función para actualizar la interfaz de usuario
function updateUI() {
    // Actualizar días disponibles
    availableDaysElement.textContent = diasDisponibles;

    // Actualizar fechas seleccionadas
    if (selectedDates.length === 0) {
        selectedDatesList.innerHTML = '<p class="empty-message">No hay fechas seleccionadas</p>';
        totalDaysElement.classList.add('hidden');
        submitButton.disabled = true;
    } else {
        selectedDatesList.innerHTML = '';
        selectedDates.forEach((date, index) => {
            const dateItem = document.createElement('div');
            dateItem.className = 'selected-date-item';
            dateItem.innerHTML = `
                <span>${date}</span>
                <button class="remove-date" data-index="${index}">&times;</button>
            `;
            selectedDatesList.appendChild(dateItem);
        });
        totalDaysElement.classList.remove('hidden');
        totalCountElement.textContent = selectedDates.length;
        submitButton.disabled = false;
    }

    // Actualizar los calendarios
    months.forEach(month => {
        const [monthName, yearStr] = month.split(' ');
        const year = parseInt(yearStr);
        const monthIndex = [
            "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
            "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
        ].indexOf(monthName);

        const gridElement = document.getElementById(`grid-${monthName}-${year}`);
        const dayElements = gridElement.querySelectorAll('.calendar-day:not(.empty)');

        dayElements.forEach(dayElement => {
            const day = parseInt(dayElement.dataset.day);
            const dateString = `${day} de ${monthName}, ${year}`;
            
            if (selectedDates.includes(dateString)) {
                dayElement.classList.add('selected');
            } else {
                dayElement.classList.remove('selected');
            }
        });
    });
}

// Función para configurar los event listeners
function setupEventListeners() {
    // Event delegation para los botones de eliminar fecha
    selectedDatesList.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-date')) {
            const index = parseInt(e.target.dataset.index);
            selectedDatesArray.splice(index, 1);
            selectedDates.splice(index, 1);
            diasDisponibles++;
            updateUI();
        }
    });

    // Event delegation para los botones de ver detalles
    calendarContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('details-button')) {
            const month = e.target.dataset.month;
            showDetailsModal(month);
        }
    });

    // Cerrar modal de detalles
    closeModalButton.addEventListener('click', () => {
        detailsModal.classList.add('hidden');
    });

    // Cerrar modal de array
    closeArrayModalButton.addEventListener('click', () => {
        arrayModal.classList.add('hidden');
    });

    // Botón de enviar solicitud
    submitButton.addEventListener('click', () => {
        showArrayModal();
    });

    // Cerrar modales al hacer clic fuera de ellos
    window.addEventListener('click', (e) => {
        if (e.target === detailsModal) {
            detailsModal.classList.add('hidden');
        }
        if (e.target === arrayModal) {
            arrayModal.classList.add('hidden');
        }
    });
}

// Función para mostrar el modal de detalles
function showDetailsModal(month) {
    modalTitle.textContent = `Detalles de Vacaciones - ${month}`;
    
    const colaboradoresMonth = colaboradores[month] || [];
    
    if (colaboradoresMonth.length === 0) {
        modalBody.innerHTML = '<p class="empty-message">No hay vacaciones programadas para este mes.</p>';
    } else {
        modalBody.innerHTML = '';
        colaboradoresMonth.forEach(colaborador => {
            const colaboradorElement = document.createElement('div');
            colaboradorElement.className = 'colaborador';
            colaboradorElement.innerHTML = `
                <h3>${colaborador.nombre}</h3>
                <p>Días: ${colaborador.dias.join(', ')}</p>
            `;
            modalBody.appendChild(colaboradorElement);
        });
    }
    
    detailsModal.classList.remove('hidden');
}

// Función para mostrar el modal con el array de fechas
function showArrayModal() {
    datesArrayElement.textContent = JSON.stringify(selectedDatesArray, null, 2);
    arrayModal.classList.remove('hidden');
}
</script>
</html>